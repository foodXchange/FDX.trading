@page "/rfqs"
@using FoodX.Simple.Models
@using FoodX.Simple.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IProductBriefService BriefService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<RFQs> Logger
@* Disabled for development - uncomment for production *@
@* @attribute [Authorize] *@

<PageTitle>My RFQs</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1>ðŸ“‹ My RFQs</h1>
            <p class="text-muted">Manage your Request for Quotations</p>
        </div>
        <div class="col-md-4 text-end">
            <a href="/product-briefs" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Create New Brief
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
            @message
            <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h5 class="mb-0">RFQ List</h5>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search RFQs..." @bind="searchTerm" @oninput="@((e) => { searchTerm = e.Value?.ToString() ?? ""; FilterRFQs(); })">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (rfqs == null)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading RFQs...</p>
                        </div>
                    }
                    else if (!filteredRFQs.Any())
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-inbox" style="font-size: 3rem; color: #dee2e6;"></i>
                            <h4 class="mt-3 text-muted">No RFQs Found</h4>
                            <p class="text-muted">
                                @if (string.IsNullOrEmpty(searchTerm))
                                {
                                    <span>You haven't created any RFQs yet. Start by creating a product brief!</span>
                                }
                                else
                                {
                                    <span>No RFQs match your search criteria.</span>
                                }
                            </p>
                            <a href="/product-briefs" class="btn btn-outline-primary">
                                <i class="bi bi-plus-circle"></i> Create First Brief
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>RFQ Number</th>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th>Issue Date</th>
                                        <th>Response Deadline</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var rfq in filteredRFQs)
                                    {
                                        <tr>
                                            <td>
                                                <strong class="text-primary">@rfq.RFQNumber</strong>
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@rfq.Title</strong>
                                                    @if (!string.IsNullOrEmpty(rfq.PackageSize))
                                                    {
                                                        <small class="text-muted d-block">Package: @rfq.PackageSize</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@rfq.Category</span>
                                            </td>
                                            <td>
                                                <small>@rfq.IssueDate.ToString("MMM dd, yyyy")</small>
                                            </td>
                                            <td>
                                                <small class="@(rfq.ResponseDeadline < DateTime.Now ? "text-danger" : "text-success")">
                                                    @rfq.ResponseDeadline.ToString("MMM dd, yyyy")
                                                    @if (rfq.ResponseDeadline < DateTime.Now)
                                                    {
                                                        <i class="bi bi-exclamation-triangle ms-1"></i>
                                                    }
                                                </small>
                                            </td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(rfq.Status)">@rfq.Status</span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => ViewRFQ(rfq)">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => ViewBrief(rfq)">
                                                        <i class="bi bi-file-text"></i>
                                                    </button>
                                                    @if (rfq.Status == "Active")
                                                    {
                                                        <button type="button" class="btn btn-sm btn-outline-warning" @onclick="() => EditRFQ(rfq)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <small class="text-muted">
                                Showing @filteredRFQs.Count() of @rfqs.Count RFQs
                            </small>
                            <nav>
                                <ul class="pagination pagination-sm mb-0">
                                    <li class="page-item disabled">
                                        <a class="page-link" href="#" tabindex="-1">Previous</a>
                                    </li>
                                    <li class="page-item active">
                                        <a class="page-link" href="#">1</a>
                                    </li>
                                    <li class="page-item disabled">
                                        <a class="page-link" href="#">Next</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@* RFQ Details Modal *@
@if (selectedRFQ != null)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">RFQ Details - @selectedRFQ.RFQNumber</h5>
                    <button type="button" class="btn-close" @onclick="CloseRFQModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Title</label>
                                <p class="form-control-plaintext">@selectedRFQ.Title</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Category</label>
                                <p class="form-control-plaintext">@selectedRFQ.Category</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Package Size</label>
                                <p class="form-control-plaintext">@(selectedRFQ.PackageSize ?? "Not specified")</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Country of Origin</label>
                                <p class="form-control-plaintext">@(selectedRFQ.CountryOfOrigin ?? "Any")</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Issue Date</label>
                                <p class="form-control-plaintext">@selectedRFQ.IssueDate.ToString("MMMM dd, yyyy")</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Response Deadline</label>
                                <p class="form-control-plaintext @(selectedRFQ.ResponseDeadline < DateTime.Now ? "text-danger" : "text-success")">
                                    @selectedRFQ.ResponseDeadline.ToString("MMMM dd, yyyy")
                                </p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Status</label>
                                <p class="form-control-plaintext">
                                    <span class="badge @GetStatusBadgeClass(selectedRFQ.Status)">@selectedRFQ.Status</span>
                                </p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Kosher Certified</label>
                                <p class="form-control-plaintext">
                                    @if (selectedRFQ.IsKosherCertified)
                                    {
                                        <span class="text-success">âœ“ Yes</span>
                                        @if (!string.IsNullOrEmpty(selectedRFQ.KosherOrganization))
                                        {
                                            <small class="text-muted">(@selectedRFQ.KosherOrganization)</small>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not required</span>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedRFQ.Description))
                    {
                        <div class="mb-3">
                            <label class="form-label fw-bold">Description</label>
                            <p class="form-control-plaintext">@selectedRFQ.Description</p>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedRFQ.AdditionalNotes))
                    {
                        <div class="mb-3">
                            <label class="form-label fw-bold">Additional Requirements</label>
                            <div class="border rounded p-3 bg-light">
                                <pre class="mb-0" style="white-space: pre-wrap;">@selectedRFQ.AdditionalNotes</pre>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => ViewBrief(selectedRFQ)">
                        <i class="bi bi-file-text"></i> View Original Brief
                    </button>
                    @if (selectedRFQ.Status == "Active")
                    {
                        <button type="button" class="btn btn-warning" @onclick="() => EditRFQ(selectedRFQ)">
                            <i class="bi bi-pencil"></i> Edit RFQ
                        </button>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="CloseRFQModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<RFQ>? rfqs;
    private List<RFQ> filteredRFQs = new();
    private RFQ? selectedRFQ;
    private string searchTerm = "";
    private string message = "";
    private bool isSuccess = false;
    private string currentUser = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadRFQs();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User.Identity?.Name ?? "Unknown";
    }

    private async Task LoadRFQs()
    {
        try
        {
            // For now, we'll get RFQs by loading all briefs and getting their generated RFQs
            // In a real application, you'd have a dedicated RFQ service
            var briefs = await BriefService.GetAllBriefsAsync();
            rfqs = new List<RFQ>();

            // Simulate RFQs for each brief that is Active (workflow tracking temporarily disabled)
            foreach (var brief in briefs.Where(b => b.Status == "Active"))
            {
                rfqs.Add(new RFQ
                {
                    Id = brief.Id,
                    RFQNumber = $"RFQ-{DateTime.Now.Year}-{brief.Id:D3}",
                    Title = brief.ProductName,
                    Description = brief.AdditionalNotes ?? $"RFQ for {brief.ProductName}",
                    Category = brief.Category,
                    PackageSize = brief.PackageSize,
                    CountryOfOrigin = brief.CountryOfOrigin,
                    IsKosherCertified = brief.IsKosherCertified,
                    KosherOrganization = brief.KosherOrganization,
                    SpecialAttributes = brief.SpecialAttributes,
                    AdditionalNotes = brief.AdditionalNotes,
                    IssueDate = brief.CreatedDate,
                    ResponseDeadline = brief.CreatedDate.AddDays(14),
                    ProductBriefId = brief.Id,
                    CreatedBy = brief.CreatedBy,
                    Status = "Active"
                });
            }

            filteredRFQs = rfqs.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading RFQs");
            message = "Error loading RFQs. Please try again.";
            isSuccess = false;
        }
    }

    private void FilterRFQs()
    {
        if (rfqs == null) return;

        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredRFQs = rfqs.ToList();
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredRFQs = rfqs.Where(r =>
                r.RFQNumber.ToLower().Contains(term) ||
                r.Title.ToLower().Contains(term) ||
                r.Category.ToLower().Contains(term) ||
                (r.CountryOfOrigin?.ToLower().Contains(term) ?? false)
            ).ToList();
        }
    }

    private void ViewRFQ(RFQ rfq)
    {
        selectedRFQ = rfq;
    }

    private void CloseRFQModal()
    {
        selectedRFQ = null;
    }

    private void ViewBrief(RFQ rfq)
    {
        message = $"Viewing original brief for RFQ {rfq.RFQNumber} - functionality coming soon!";
        isSuccess = true;
        CloseRFQModal();
    }

    private void EditRFQ(RFQ rfq)
    {
        message = $"Edit functionality for RFQ {rfq.RFQNumber} coming soon!";
        isSuccess = true;
        CloseRFQModal();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Draft" => "bg-secondary",
            "Active" => "bg-success",
            "Pending" => "bg-warning",
            "Closed" => "bg-danger",
            "Completed" => "bg-primary",
            _ => "bg-light text-dark"
        };
    }
}