@page "/login"
@using Microsoft.AspNetCore.Identity
@using FoodX.Supplier.Models
@using MudBlazor
@inject SignInManager<FoodX.Supplier.Models.ApplicationUser> SignInManager
@inject UserManager<FoodX.Supplier.Models.ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ILogger<Login> Logger

<PageTitle>Login - FoodX Supplier Portal</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudPaper Class="pa-8" Elevation="2">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6">Supplier Login</MudText>
        <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-6" Color="Color.Tertiary">
            Sign in to manage your products and orders
        </MudText>
        
        <EditForm Model="@model" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            
            <MudTextField Label="Email Address" 
                          @bind-Value="model.Email" 
                          For="@(() => model.Email)"
                          Variant="Variant.Outlined"
                          Required="true"
                          InputType="InputType.Email"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          Adornment="Adornment.Start"
                          Class="mb-4" />
            
            <MudTextField Label="Password" 
                          @bind-Value="model.Password" 
                          For="@(() => model.Password)"
                          Variant="Variant.Outlined"
                          Required="true"
                          InputType="@passwordInputType"
                          AdornmentIcon="@Icons.Material.Filled.Lock"
                          Adornment="Adornment.Start"
                          OnAdornmentClick="TogglePasswordVisibility"
                          AdornmentAriaLabel="Toggle Password Visibility"
                          Class="mb-4" />
            
            <MudGrid>
                <MudItem xs="6">
                    <MudCheckBox @bind-Value="model.RememberMe" 
                                 Color="Color.Primary">
                        Remember me
                    </MudCheckBox>
                </MudItem>
                <MudItem xs="6" Class="text-right">
                    <MudLink Href="/forgot-password">Forgot password?</MudLink>
                </MudItem>
            </MudGrid>
            
            <MudButton ButtonType="ButtonType.Submit" 
                       Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       Size="Size.Large"
                       FullWidth="true"
                       Disabled="@isLoading"
                       Class="my-4">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Signing in...</MudText>
                }
                else
                {
                    <MudText>Sign In</MudText>
                }
            </MudButton>
            
            <MudDivider DividerType="DividerType.Middle" Class="my-4" />
            
            <MudButton Variant="Variant.Outlined" 
                       Color="Color.Primary" 
                       Size="Size.Large"
                       FullWidth="true"
                       StartIcon="@Icons.Material.Filled.Email"
                       OnClick="RequestMagicLink"
                       Disabled="@isLoading"
                       Class="mb-4">
                Sign in with Magic Link
            </MudButton>
            
            <MudText Align="Align.Center">
                New to FoodX? <MudLink Href="/register">Create a supplier account</MudLink>
            </MudText>
        </EditForm>
    </MudPaper>
    
    <MudPaper Class="pa-4 mt-4" Elevation="1">
        <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Tertiary">
            <MudIcon Icon="@Icons.Material.Filled.Security" Size="Size.Small" /> 
            Secure login protected by industry-standard encryption
        </MudText>
    </MudPaper>
</MudContainer>

@code {
    private LoginModel model = new();
    private bool isLoading = false;
    private InputType passwordInputType = InputType.Password;
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task LoginUser()
    {
        isLoading = true;
        
        try
        {
            var user = await UserManager.FindByEmailAsync(model.Email);
            
            if (user == null)
            {
                Snackbar.Add("Invalid email or password", Severity.Error);
                return;
            }
            
            if (!user.IsActive)
            {
                Snackbar.Add("Your account has been deactivated. Please contact support.", Severity.Warning);
                return;
            }
            
            var result = await SignInManager.PasswordSignInAsync(
                model.Email, 
                model.Password, 
                model.RememberMe, 
                lockoutOnFailure: true);
            
            if (result.Succeeded)
            {
                // Update last login time
                user.LastLoginAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(user);
                
                Logger.LogInformation($"User {model.Email} logged in successfully");
                Snackbar.Add("Welcome back!", Severity.Success);
                
                // Check if profile is complete
                if (!user.ProfileCompleted)
                {
                    Navigation.NavigateTo("/profile/setup");
                }
                else
                {
                    Navigation.NavigateTo(ReturnUrl ?? "/");
                }
            }
            else if (result.IsLockedOut)
            {
                Snackbar.Add("Account locked due to multiple failed attempts. Please try again later.", Severity.Warning);
            }
            else if (result.RequiresTwoFactor)
            {
                Navigation.NavigateTo($"/login-2fa?returnUrl={ReturnUrl}&rememberMe={model.RememberMe}");
            }
            else
            {
                Snackbar.Add("Invalid email or password", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login failed for user {Email}", model.Email);
            Snackbar.Add("Login failed. Please try again.", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void RequestMagicLink()
    {
        if (string.IsNullOrWhiteSpace(model.Email))
        {
            Snackbar.Add("Please enter your email address", Severity.Warning);
            return;
        }
        
        isLoading = true;
        
        try
        {
            // TODO: Implement magic link service
            Snackbar.Add("Magic link sent to your email. Please check your inbox.", Severity.Info);
            
            // For now, redirect to magic link waiting page
            Navigation.NavigateTo($"/magic-link-sent?email={model.Email}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to send magic link to {Email}", model.Email);
            Snackbar.Add("Failed to send magic link. Please try again.", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void TogglePasswordVisibility()
    {
        passwordInputType = passwordInputType == InputType.Password ? InputType.Text : InputType.Password;
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public bool RememberMe { get; set; } = false;
    }
}