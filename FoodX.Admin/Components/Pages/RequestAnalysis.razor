@page "/request-analysis"
@using FoodX.Admin.Data
@using FoodX.Admin.Models
@using FoodX.Admin.Services
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@inject FoodXDbContext DbContext
@inject IAIRequestAnalyzer AIAnalyzer
@inject ISnackbar Snackbar
@inject ILogger<RequestAnalysis> Logger
@rendermode InteractiveServer

<PageTitle>AI Product Request Analysis</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">AI Product Request Analysis</MudText>
    <MudText Typo="Typo.body1" Class="mb-4">
        Define what product you're looking for using AI-powered analysis
    </MudText>

    <MudGrid Style="height: calc(100vh - 250px);">
        <!-- Input Section -->
        <MudItem xs="12" md="4" Style="height: 100%; overflow-y: auto;">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h5" Class="mb-3">Create New Request</MudText>
                
                <!-- Request Title -->
                <MudTextField @bind-Value="requestTitle" 
                              Label="Request Title" 
                              Variant="Variant.Outlined"
                              HelperText="Give your request a descriptive name"
                              Class="mb-3" />

                <!-- Input Type Selection -->
                <MudRadioGroup @bind-Value="inputType" Class="mb-3">
                    <MudRadio Value="@InputTypes.Text" Color="Color.Primary">
                        <MudText>Text Description</MudText>
                    </MudRadio>
                    <MudRadio Value="@InputTypes.URL" Color="Color.Primary">
                        <MudText>Product URL</MudText>
                    </MudRadio>
                    <MudRadio Value="@InputTypes.Image" Color="Color.Primary">
                        <MudText>Upload Image</MudText>
                    </MudRadio>
                </MudRadioGroup>

                <!-- Dynamic Input Based on Type -->
                @if (inputType == InputTypes.Text)
                {
                    <MudTextField @bind-Value="textInput"
                                  Label="Describe the product"
                                  Variant="Variant.Outlined"
                                  Lines="3"
                                  Placeholder="e.g., I want a product like Oreo cookies"
                                  Class="mb-3" />
                }
                else if (inputType == InputTypes.URL)
                {
                    <MudTextField @bind-Value="urlInput"
                                  Label="Product URL"
                                  Variant="Variant.Outlined"
                                  Placeholder="https://example.com/product"
                                  Class="mb-3" />
                }
                else if (inputType == InputTypes.Image)
                {
                    <MudFileUpload T="IBrowserFile" FilesChanged="HandleFileSelected" Accept="image/*" aria-label="Upload image file">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       aria-label="Upload Image">
                                Upload Image
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    @if (!string.IsNullOrEmpty(uploadedFileName))
                    {
                        <MudText Typo="Typo.body2" Class="mt-2">
                            Selected: @uploadedFileName
                        </MudText>
                    }
                }

                <!-- Buyer Selection -->
                <MudAutocomplete T="FoodXBuyer"
                                 @bind-Value="selectedBuyer"
                                 Label="Select Buyer Company"
                                 Variant="Variant.Outlined"
                                 SearchFunc="SearchBuyers"
                                 ToStringFunc="@(b => b?.Company ?? string.Empty)"
                                 ShowProgressIndicator="true"
                                 MinCharacters="0"
                                 CoerceText="false"
                                 CoerceValue="false"
                                 ResetValueOnEmptyText="true"
                                 Clearable="true"
                                 ClearIcon="@Icons.Material.Filled.Clear"
                                 AdornmentAriaLabel="Clear selection"
                                 Class="mb-3" />

                <!-- Additional Notes -->
                <MudTextField @bind-Value="additionalNotes"
                              Label="Additional Notes (Optional)"
                              Variant="Variant.Outlined"
                              Lines="2"
                              Class="mb-3" />

                <!-- Action Buttons -->
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Disabled="@(isProcessing || !IsValidInput())"
                           OnClick="AnalyzeRequest"
                           FullWidth="true">
                    @if (isProcessing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">AI is analyzing...</MudText>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Psychology" Class="mr-1" />
                        <MudText>Analyze with AI</MudText>
                    }
                </MudButton>
            </MudPaper>
        </MudItem>

        <!-- Analysis Results Section -->
        <MudItem xs="12" md="8" Style="height: 100%; overflow-y: auto;">
            @if (currentAnalysis != null)
            {
                <MudPaper Class="pa-4" Elevation="2" Style="height: 100%;">
                    <MudText Typo="Typo.h5" Class="mb-3">AI Analysis Results</MudText>
                    
                    <MudTabs Elevation="0" ApplyEffectsToContainer="true" PanelClass="pa-6">
                        <MudTabPanel Text="Overview" Icon="@Icons.Material.Filled.Info">
                            @if (currentAnalysis.ProductIdentification != null)
                            {
                                <!-- Product Identification -->
                                <MudCard Class="mb-3">
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">Product Identified</MudText>
                                        <MudText Typo="Typo.body1" Class="mt-2">
                                            <strong>@currentAnalysis.ProductIdentification.DetectedProduct</strong>
                                        </MudText>
                                        <MudText Typo="Typo.body2">
                                            Generic Name: @currentAnalysis.ProductIdentification.GenericName
                                        </MudText>
                                        @if (!string.IsNullOrEmpty(currentAnalysis.ProductIdentification.BrandReference))
                                        {
                                            <MudText Typo="Typo.body2">
                                                Brand Reference: @currentAnalysis.ProductIdentification.BrandReference
                                            </MudText>
                                        }
                                        <MudProgressLinear Color="Color.Success" 
                                                           Value="@(currentAnalysis.ProductIdentification.Confidence * 100)" 
                                                           Class="mt-2" />
                                        <MudText Typo="Typo.caption">
                                            Confidence: @($"{currentAnalysis.ProductIdentification.Confidence:P0}")
                                        </MudText>
                                    </MudCardContent>
                                </MudCard>
                            }

                            @if (currentAnalysis.DetailedDescription != null)
                            {
                                <!-- Description -->
                                <MudCard Class="mb-3">
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">Description</MudText>
                                        <MudText Typo="Typo.body1" Class="mt-2">
                                            @currentAnalysis.DetailedDescription.Summary
                                        </MudText>
                                        @if (currentAnalysis.DetailedDescription.KeyCharacteristics?.Any() == true)
                                        {
                                            <MudText Typo="Typo.subtitle2" Class="mt-2">Key Characteristics:</MudText>
                                            <MudList T="string" Dense="true">
                                                @foreach (var characteristic in currentAnalysis.DetailedDescription.KeyCharacteristics)
                                                {
                                                    <MudListItem Icon="@Icons.Material.Filled.Check">
                                                        @characteristic
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            }

                            @if (currentAnalysis.CategoryClassification != null)
                            {
                                <!-- Category -->
                                <MudCard Class="mb-3">
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">Category Classification</MudText>
                                        <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="mt-2">
                                            @currentAnalysis.CategoryClassification.PrimaryCategory
                                        </MudChip>
                                        <MudChip T="string" Color="Color.Secondary" Size="Size.Small">
                                            @currentAnalysis.CategoryClassification.SecondaryCategory
                                        </MudChip>
                                        <MudChip T="string" Color="Color.Tertiary" Size="Size.Small">
                                            @currentAnalysis.CategoryClassification.SpecificType
                                        </MudChip>
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudTabPanel>

                        <MudTabPanel Text="Packaging" Icon="@Icons.Material.Filled.Inventory">
                            @if (currentAnalysis.PackagingDetails != null)
                            {
                                <!-- Packaging Details -->
                                <MudCard Class="mb-3">
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">Packaging Specifications</MudText>
                                        
                                        <MudGrid Class="mt-2">
                                            @if (!string.IsNullOrEmpty(currentAnalysis.PackagingDetails.PackageType))
                                            {
                                                <MudItem xs="6">
                                                    <MudText Typo="Typo.body2">
                                                        <strong>Type:</strong> @currentAnalysis.PackagingDetails.PackageType
                                                    </MudText>
                                                </MudItem>
                                            }
                                            @if (!string.IsNullOrEmpty(currentAnalysis.PackagingDetails.Material))
                                            {
                                                <MudItem xs="6">
                                                    <MudText Typo="Typo.body2">
                                                        <strong>Material:</strong> @currentAnalysis.PackagingDetails.Material
                                                    </MudText>
                                                </MudItem>
                                            }
                                            @if (!string.IsNullOrEmpty(currentAnalysis.PackagingDetails.NetWeight))
                                            {
                                                <MudItem xs="6">
                                                    <MudText Typo="Typo.body2">
                                                        <strong>Net Weight:</strong> @currentAnalysis.PackagingDetails.NetWeight
                                                        @if (!string.IsNullOrEmpty(currentAnalysis.PackagingDetails.NetWeightOz))
                                                        {
                                                            <span> (@currentAnalysis.PackagingDetails.NetWeightOz)</span>
                                                        }
                                                    </MudText>
                                                </MudItem>
                                            }
                                            @if (!string.IsNullOrEmpty(currentAnalysis.PackagingDetails.Dimensions))
                                            {
                                                <MudItem xs="6">
                                                    <MudText Typo="Typo.body2">
                                                        <strong>Dimensions:</strong> @currentAnalysis.PackagingDetails.Dimensions
                                                    </MudText>
                                                </MudItem>
                                            }
                                        </MudGrid>
                                        
                                        @if (currentAnalysis.PackagingDetails.PackagingComponents?.Any() == true)
                                        {
                                            <MudText Typo="Typo.subtitle2" Class="mt-2">Components:</MudText>
                                            <MudChipSet T="string">
                                                @foreach (var component in currentAnalysis.PackagingDetails.PackagingComponents)
                                                {
                                                    <MudChip T="string" Size="Size.Small">@component</MudChip>
                                                }
                                            </MudChipSet>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudTabPanel>

                        <MudTabPanel Text="Labeling" Icon="@Icons.Material.Filled.Label">
                            @if (currentAnalysis.LabelingInformation != null)
                            {
                                <!-- Labeling Information -->
                                <MudCard Class="mb-3">
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">Labeling Information</MudText>
                                        
                                        @if (!string.IsNullOrEmpty(currentAnalysis.LabelingInformation.ProductNameOnLabel))
                                        {
                                            <MudText Typo="Typo.body1" Class="mt-2">
                                                <strong>Product Name:</strong> @currentAnalysis.LabelingInformation.ProductNameOnLabel
                                            </MudText>
                                        }
                                        
                                        @if (!string.IsNullOrEmpty(currentAnalysis.LabelingInformation.Manufacturer))
                                        {
                                            <MudText Typo="Typo.body2">
                                                <strong>Manufacturer:</strong> @currentAnalysis.LabelingInformation.Manufacturer
                                            </MudText>
                                        }
                                        
                                        @if (currentAnalysis.LabelingInformation.IngredientsText?.Any() == true)
                                        {
                                            <MudExpansionPanels Class="mt-2">
                                                <MudExpansionPanel Text="Full Ingredients List">
                                                    <MudList T="string" Dense="true">
                                                        @foreach (var ingredient in currentAnalysis.LabelingInformation.IngredientsText)
                                                        {
                                                            <MudListItem>@ingredient</MudListItem>
                                                        }
                                                    </MudList>
                                                </MudExpansionPanel>
                                            </MudExpansionPanels>
                                        }
                                        
                                        @if (currentAnalysis.LabelingInformation.Allergens?.Any() == true)
                                        {
                                            <MudAlert Severity="Severity.Warning" Class="mt-2">
                                                <strong>Allergens:</strong> @string.Join(", ", currentAnalysis.LabelingInformation.Allergens)
                                            </MudAlert>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudTabPanel>

                        <MudTabPanel Text="Attributes" Icon="@Icons.Material.Filled.Category">
                            @if (currentAnalysis.ProductAttributes != null)
                            {
                                <!-- Product Dietary Attributes -->
                                <MudCard Class="mb-3">
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">Dietary & Nutritional Attributes</MudText>
                                        
                                        <!-- Certifications -->
                                        <MudGrid Class="mt-3">
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Certifications</MudText>
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsKosher" 
                                                             ReadOnly="true" Label="Kosher" Color="Color.Success" />
                                                @if (!string.IsNullOrEmpty(currentAnalysis.ProductAttributes.KosherCertification))
                                                {
                                                    <MudText Typo="Typo.caption" Class="ml-8">@currentAnalysis.ProductAttributes.KosherCertification</MudText>
                                                }
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsHalal" 
                                                             ReadOnly="true" Label="Halal" Color="Color.Success" />
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsOrganic" 
                                                             ReadOnly="true" Label="Organic" Color="Color.Success" />
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsNonGMO" 
                                                             ReadOnly="true" Label="Non-GMO" Color="Color.Success" />
                                            </MudItem>
                                        </MudGrid>
                                        
                                        <!-- Allergen Free Claims -->
                                        <MudDivider Class="my-3" />
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Allergen Information</MudText>
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsGlutenFree" 
                                                             ReadOnly="true" Label="Gluten Free" Color="Color.Info" />
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsNutFree" 
                                                             ReadOnly="true" Label="Nut Free" Color="Color.Info" />
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsDairyFree" 
                                                             ReadOnly="true" Label="Dairy Free" Color="Color.Info" />
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsSoyFree" 
                                                             ReadOnly="true" Label="Soy Free" Color="Color.Info" />
                                            </MudItem>
                                        </MudGrid>
                                        
                                        <!-- Sugar & Dietary -->
                                        <MudDivider Class="my-3" />
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Sugar & Dietary</MudText>
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsSugarFree" 
                                                             ReadOnly="true" Label="Sugar Free" Color="Color.Warning" />
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsVegan" 
                                                             ReadOnly="true" Label="Vegan" Color="Color.Success" />
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsVitaminEnriched" 
                                                             ReadOnly="true" Label="Vitamin Enriched" Color="Color.Tertiary" />
                                            </MudItem>
                                            <MudItem xs="6" md="3">
                                                <MudCheckBox T="bool?" Value="@currentAnalysis.ProductAttributes.IsProteinEnriched" 
                                                             ReadOnly="true" Label="Protein Enriched" Color="Color.Tertiary" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudTabPanel>
                    </MudTabs>

                    <!-- Action Buttons -->
                    <MudGrid Class="mt-4">
                        <MudItem xs="6">
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Success" 
                                       OnClick="SaveAnalysis"
                                       FullWidth="true">
                                <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-1" />
                                Save Analysis
                            </MudButton>
                        </MudItem>
                        <MudItem xs="6">
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Primary" 
                                       OnClick="ClearAnalysis"
                                       FullWidth="true">
                                <MudIcon Icon="@Icons.Material.Filled.Clear" Class="mr-1" />
                                Start New Analysis
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
            }
            else
            {
                <MudPaper Class="pa-4" Elevation="2">
                    <MudText Typo="Typo.h5" Class="mb-3">How It Works</MudText>
                    <MudList T="string">
                        <MudListItem Icon="@Icons.Material.Filled.TextFields">
                            <MudText>Describe a product (e.g., "cookies like Oreo")</MudText>
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.Link">
                            <MudText>Paste a product URL from any website</MudText>
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.Image">
                            <MudText>Upload a product image for visual analysis</MudText>
                        </MudListItem>
                    </MudList>
                    <MudDivider Class="my-3" />
                    <MudText Typo="Typo.body2">
                        Our AI will analyze your input and generate a comprehensive product specification
                        including categories, ingredients, packaging, and market context.
                    </MudText>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>

    <!-- Recent Requests -->
    <MudPaper Class="pa-4 mt-4" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-3">Recent Requests</MudText>
        @if (recentRequests.Any())
        {
            <MudSimpleTable Hover="true" Bordered="true" Striped="true">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var request in recentRequests)
                    {
                        <tr>
                            <td>@request.Title</td>
                            <td>
                                @switch(request.InputType.ToLower())
                                {
                                    case "text":
                                        <MudChip T="string" Size="Size.Small" Color="Color.Info">Text</MudChip>
                                        break;
                                    case "url":
                                        <MudChip T="string" Size="Size.Small" Color="Color.Primary">URL</MudChip>
                                        break;
                                    case "image":
                                        <MudChip T="string" Size="Size.Small" Color="Color.Success">Image</MudChip>
                                        break;
                                    default:
                                        <MudChip T="string" Size="Size.Small">Unknown</MudChip>
                                        break;
                                }
                            </td>
                            <td>
                                @switch(request.Status)
                                {
                                    case "pending":
                                        <MudChip T="string" Size="Size.Small" Color="Color.Warning">Pending</MudChip>
                                        break;
                                    case "analyzed":
                                        <MudChip T="string" Size="Size.Small" Color="Color.Success">Analyzed</MudChip>
                                        break;
                                    case "failed":
                                        <MudChip T="string" Size="Size.Small" Color="Color.Error">Failed</MudChip>
                                        break;
                                    default:
                                        <MudChip T="string" Size="Size.Small">@request.Status</MudChip>
                                        break;
                                }
                            </td>
                            <td>@request.CreatedAt.ToString("MM/dd/yyyy HH:mm")</td>
                            <td>
                                <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                               Size="Size.Small" 
                                               OnClick="@(() => LoadRequest(request))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Size="Size.Small" 
                                               Color="Color.Error"
                                               OnClick="@(() => DeleteRequest(request))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
        else
        {
            <MudText Typo="Typo.body1">No requests yet. Create your first analysis above!</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private enum InputTypes { Text, URL, Image }
    private InputTypes inputType = InputTypes.Text;
    
    private string requestTitle = "";
    private string textInput = "";
    private string urlInput = "";
    private string additionalNotes = "";
    private string uploadedFileName = "";
    private byte[]? uploadedImageData;
    private FoodXBuyer? selectedBuyer;
    
    private bool isProcessing = false;
    private string errorMessage = "";
    
    private ProductAnalysis? currentAnalysis;
    private List<BuyerRequest> recentRequests = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentRequests();
    }

    private async Task LoadRecentRequests()
    {
        try
        {
            recentRequests = await DbContext.BuyerRequests
                .OrderByDescending(r => r.CreatedAt)
                .Take(10)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading recent requests");
        }
    }

    private async Task<IEnumerable<FoodXBuyer>> SearchBuyers(string value, CancellationToken ct)
    {
        if (string.IsNullOrEmpty(value))
        {
            return await DbContext.FoodXBuyers
                .Take(10)
                .ToListAsync(ct);
        }

        return await DbContext.FoodXBuyers
            .Where(b => b.Company != null && b.Company.Contains(value))
            .Take(10)
            .ToListAsync(ct);
    }

    private bool IsValidInput()
    {
        return inputType switch
        {
            InputTypes.Text => !string.IsNullOrWhiteSpace(textInput),
            InputTypes.URL => !string.IsNullOrWhiteSpace(urlInput),
            InputTypes.Image => uploadedImageData != null,
            _ => false
        };
    }

    private async Task HandleFileSelected(IBrowserFile file)
    {
        try
        {
            uploadedFileName = file.Name;
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            uploadedImageData = ms.ToArray();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading file");
            Snackbar.Add("Error uploading file", Severity.Error);
        }
    }

    private async Task AnalyzeRequest()
    {
        if (!IsValidInput())
        {
            Snackbar.Add("Please provide input for analysis", Severity.Warning);
            return;
        }

        isProcessing = true;
        errorMessage = "";
        
        try
        {
            // Create the buyer request
            var request = new BuyerRequest
            {
                Title = string.IsNullOrWhiteSpace(requestTitle) ? "Untitled Request" : requestTitle,
                InputType = inputType.ToString(),
                InputContent = inputType switch
                {
                    InputTypes.Text => textInput,
                    InputTypes.URL => urlInput,
                    InputTypes.Image => Convert.ToBase64String(uploadedImageData!),
                    _ => ""
                },
                Notes = additionalNotes,
                BuyerId = selectedBuyer?.Id ?? 0,
                Status = "Pending",
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            DbContext.BuyerRequests.Add(request);
            await DbContext.SaveChangesAsync();

            // Perform AI analysis
            currentAnalysis = inputType switch
            {
                InputTypes.Text => await AIAnalyzer.AnalyzeTextRequest(textInput),
                InputTypes.URL => await AIAnalyzer.AnalyzeUrlRequest(urlInput),
                InputTypes.Image => await AIAnalyzer.AnalyzeImageRequest(uploadedImageData!),
                _ => null
            };

            if (currentAnalysis != null)
            {
                // Save AI analysis result
                var analysisResult = new AIAnalysisResult
                {
                    RequestId = request.Id,
                    ProcessedAt = DateTime.UtcNow
                };
                analysisResult.SetAnalysisData(currentAnalysis);
                
                DbContext.AIAnalysisResults.Add(analysisResult);
                
                // Update request status
                request.Status = "analyzed";
                await DbContext.SaveChangesAsync();

                Snackbar.Add("Analysis completed successfully!", Severity.Success);
                await LoadRecentRequests();
            }
            else
            {
                request.Status = "failed";
                await DbContext.SaveChangesAsync();
                errorMessage = "Analysis failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during analysis");
            errorMessage = "An error occurred during analysis. Please try again.";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void SaveAnalysis()
    {
        if (currentAnalysis == null) return;
        
        // Already saved during analysis
        Snackbar.Add("Analysis has been saved", Severity.Success);
    }

    private void ClearAnalysis()
    {
        currentAnalysis = null;
        requestTitle = "";
        textInput = "";
        urlInput = "";
        additionalNotes = "";
        uploadedFileName = "";
        uploadedImageData = null;
        selectedBuyer = null;
        errorMessage = "";
    }

    private async Task LoadRequest(BuyerRequest request)
    {
        try
        {
            var analysisResult = await DbContext.AIAnalysisResults
                .FirstOrDefaultAsync(a => a.RequestId == request.Id);
                
            if (analysisResult != null)
            {
                currentAnalysis = analysisResult.ParsedAnalysis;
                requestTitle = request.Title;
                Snackbar.Add("Request loaded", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading request");
            Snackbar.Add("Error loading request", Severity.Error);
        }
    }

    private async Task DeleteRequest(BuyerRequest request)
    {
        try
        {
            DbContext.BuyerRequests.Remove(request);
            await DbContext.SaveChangesAsync();
            await LoadRecentRequests();
            Snackbar.Add("Request deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting request");
            Snackbar.Add("Error deleting request", Severity.Error);
        }
    }
}