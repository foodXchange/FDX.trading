@page "/support/email/inbox"
@using FoodX.Admin.Services
@using System.Text.Json
@using System.Linq
@inject EmailServiceClient EmailService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Email Inbox - FoodX Support</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Left Sidebar - Folders & Actions -->
        <MudItem xs="12" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           FullWidth="true"
                           StartIcon="@Icons.Material.Filled.Create"
                           OnClick="@(() => Navigation.NavigateTo("/support/email/compose"))">
                    Compose Email
                </MudButton>
                
                <MudDivider Class="my-3" />
                
                <MudList T="string">
                    <MudListItem T="string" Icon="@Icons.Material.Filled.Inbox" 
                                 OnClick="@(() => LoadEmails("inbox"))"
                                 Class="@(currentFolder == "inbox" ? "mud-theme-primary" : "")">
                        Inbox
                        @if (unreadCount > 0)
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Primary" Class="ml-auto">@unreadCount</MudChip>
                        }
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.Send" 
                                 OnClick="@(() => LoadEmails("sent"))"
                                 Class="@(currentFolder == "sent" ? "mud-theme-primary" : "")">
                        Sent
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.Drafts" 
                                 OnClick="@(() => LoadEmails("drafts"))"
                                 Disabled="true">
                        Drafts (Coming Soon)
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.Archive" 
                                 OnClick="@(() => LoadEmails("archived"))"
                                 Disabled="true">
                        Archived
                    </MudListItem>
                </MudList>
                
                <MudDivider Class="my-3" />
                
                <MudText Typo="Typo.subtitle2" Class="mb-2">Categories</MudText>
                <MudList T="string" Dense="true">
                    <MudListItem T="string" Icon="@Icons.Material.Filled.RequestQuote" OnClick="@(() => FilterByCategory("RFQ"))">
                        RFQ Related
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.Description" OnClick="@(() => FilterByCategory("Quote"))">
                        Quotes
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.ShoppingCart" OnClick="@(() => FilterByCategory("Order"))">
                        Orders
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.Support" OnClick="@(() => FilterByCategory("Support"))">
                        Support
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>
        
        <!-- Main Content - Email List -->
        <MudItem xs="12" md="9">
            <MudPaper Elevation="2" Class="pa-4">
                <!-- Toolbar -->
                <MudToolBar>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="@GetFolderIcon()" Class="mr-2" />
                        @GetFolderTitle()
                    </MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                   title="Refresh"
                                   OnClick="RefreshEmails" />
                    <MudIconButton Icon="@Icons.Material.Filled.Search" 
                                   title="Search"
                                   OnClick="ToggleSearch" />
                </MudToolBar>
                
                <!-- Search Bar -->
                @if (showSearch)
                {
                    <MudTextField @bind-Value="searchQuery" 
                                  Label="Search emails..." 
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  OnKeyUp="@(async (e) => { if (e.Key == "Enter") await SearchEmails(); })"
                                  Class="mb-3" />
                }
                
                <!-- Email List -->
                @if (isLoading)
                {
                    <MudProgressLinear Indeterminate="true" />
                    <MudText Align="Align.Center" Class="my-4">Loading emails...</MudText>
                }
                else if (!emails.Any())
                {
                    <MudAlert Severity="Severity.Info" Class="my-4">
                        No emails found in @GetFolderTitle().ToLower()
                    </MudAlert>
                }
                else
                {
                    <MudTable Items="@emails" Hover="true" Dense="true" OnRowClick="EmailRowClicked" T="EmailDto">
                        <HeaderContent>
                            <MudTh>
                                <MudCheckBox T="bool" Value="selectAll" ValueChanged="SelectAllChanged" />
                            </MudTh>
                            <MudTh>From</MudTh>
                            <MudTh>Subject</MudTh>
                            <MudTh>Category</MudTh>
                            <MudTh>Date</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="context">
                            <MudTd>
                                <MudCheckBox T="bool" Value="@selectedEmails.Contains(context.Id)" 
                                             ValueChanged="@((bool val) => ToggleEmailSelection(context.Id))" />
                            </MudTd>
                            <MudTd>
                                <div class="d-flex align-center">
                                    @if (context.ReadAt == null && context.Direction == "Inbound")
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Circle" 
                                                 Size="Size.Small" 
                                                 Color="Color.Primary" 
                                                 Class="mr-2" 
                                                 Style="font-size: 10px;" />
                                    }
                                    <MudText Typo="Typo.body2">
                                        @(context.Direction == "Inbound" ? context.From : context.To)
                                    </MudText>
                                </div>
                            </MudTd>
                            <MudTd>
                                <MudText Typo="Typo.body2" 
                                         Style="@(context.ReadAt == null ? "font-weight: bold;" : "")">
                                    @context.Subject
                                </MudText>
                                @if (context.Attachments?.Any() == true)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.AttachFile" 
                                             Size="Size.Small" 
                                             Class="ml-1" />
                                }
                            </MudTd>
                            <MudTd>
                                @if (!string.IsNullOrWhiteSpace(context.Category))
                                {
                                    <MudChip T="string" Size="Size.Small" Color="@GetCategoryColor(context.Category)">
                                        @context.Category
                                    </MudChip>
                                }
                            </MudTd>
                            <MudTd>
                                <MudText Typo="Typo.caption">
                                    @GetRelativeTime(context.CreatedAt)
                                </MudText>
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Reply" 
                                               Size="Size.Small"
                                               title="Reply"
                                               OnClick="@(() => ReplyToEmail(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Size="Size.Small"
                                               title="Delete"
                                               Color="Color.Error"
                                               OnClick="@(() => DeleteEmail(context.Id))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    
                    <!-- Pagination -->
                    <div class="d-flex justify-space-between align-center mt-3">
                        <MudText Typo="Typo.body2">
                            Showing @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, totalEmails) of @totalEmails
                        </MudText>
                        <MudPagination Color="Color.Primary" 
                                       Count="@((totalEmails + pageSize - 1) / pageSize)"
                                       Selected="@currentPage"
                                       SelectedChanged="PageChanged" />
                    </div>
                }
                
                <!-- Bulk Actions -->
                @if (selectedEmails.Any())
                {
                    <MudPaper Elevation="3" Class="pa-3 mt-3">
                        <MudText Typo="Typo.body2" Class="mb-2">
                            @selectedEmails.Count email(s) selected
                        </MudText>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.MarkEmailRead"
                                   OnClick="MarkSelectedAsRead"
                                   Disabled="@(currentFolder != "inbox")">
                            Mark as Read
                        </MudButton>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   OnClick="DeleteSelectedEmails">
                            Delete Selected
                        </MudButton>
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<EmailDto> emails = new();
    private HashSet<int> selectedEmails = new();
    private string currentFolder = "inbox";
    private string? currentCategory = null;
    private string searchQuery = string.Empty;
    private bool showSearch = false;
    private bool isLoading = false;
    private bool selectAll = false;
    private int unreadCount = 0;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalEmails = 0;
    
    // Current user email - in production, get from authentication
    private string currentUserEmail = "noreply@fdx.trading";

    protected override async Task OnInitializedAsync()
    {
        await LoadEmails("inbox");
    }

    private async Task LoadEmails(string folder)
    {
        currentFolder = folder;
        currentCategory = null;
        selectedEmails.Clear();
        selectAll = false;
        currentPage = 1;
        
        await RefreshEmails();
    }

    private async Task RefreshEmails()
    {
        isLoading = true;
        try
        {
            var response = await EmailService.GetInboxAsync(
                currentUserEmail, 
                currentPage, 
                pageSize,
                currentFolder,
                currentCategory,
                searchQuery
            );
            
            if (response.Success)
            {
                emails = response.Emails;
                totalEmails = response.TotalCount;
                unreadCount = response.UnreadCount;
            }
            else
            {
                Snackbar.Add("Failed to load emails", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading emails: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FilterByCategory(string category)
    {
        currentCategory = category;
        currentPage = 1;
        await RefreshEmails();
    }

    private async Task SearchEmails()
    {
        currentPage = 1;
        await RefreshEmails();
    }

    private void ToggleSearch()
    {
        showSearch = !showSearch;
        if (!showSearch)
        {
            searchQuery = string.Empty;
            _ = RefreshEmails();
        }
    }

    private void EmailRowClicked(TableRowClickEventArgs<EmailDto> args)
    {
        if (args.Item?.ThreadId != null)
        {
            Navigation.NavigateTo($"/support/email/thread/{args.Item.ThreadId}");
        }
        else if (args.Item != null)
        {
            Navigation.NavigateTo($"/support/email/view/{args.Item.Id}");
        }
    }

    private void ReplyToEmail(EmailDto email)
    {
        Navigation.NavigateTo($"/support/email/compose?replyTo={email.Id}");
    }

    private async Task DeleteEmail(int emailId)
    {
        var result = await EmailService.DeleteEmailAsync(emailId);
        if (result.Success)
        {
            Snackbar.Add("Email deleted", Severity.Success);
            await RefreshEmails();
        }
        else
        {
            Snackbar.Add("Failed to delete email", Severity.Error);
        }
    }

    private void ToggleEmailSelection(int emailId)
    {
        if (selectedEmails.Contains(emailId))
            selectedEmails.Remove(emailId);
        else
            selectedEmails.Add(emailId);
    }

    private void SelectAllChanged(bool value)
    {
        selectAll = value;
        if (value)
        {
            foreach (var email in emails)
                selectedEmails.Add(email.Id);
        }
        else
        {
            selectedEmails.Clear();
        }
    }

    private async Task MarkSelectedAsRead()
    {
        foreach (var emailId in selectedEmails)
        {
            await EmailService.MarkAsReadAsync(emailId);
        }
        selectedEmails.Clear();
        selectAll = false;
        await RefreshEmails();
        Snackbar.Add("Emails marked as read", Severity.Success);
    }

    private async Task DeleteSelectedEmails()
    {
        foreach (var emailId in selectedEmails)
        {
            await EmailService.DeleteEmailAsync(emailId);
        }
        selectedEmails.Clear();
        selectAll = false;
        await RefreshEmails();
        Snackbar.Add("Emails deleted", Severity.Success);
    }

    private async Task PageChanged(int page)
    {
        currentPage = page;
        await RefreshEmails();
    }

    private string GetFolderIcon()
    {
        return currentFolder switch
        {
            "sent" => Icons.Material.Filled.Send,
            "drafts" => Icons.Material.Filled.Drafts,
            "archived" => Icons.Material.Filled.Archive,
            _ => Icons.Material.Filled.Inbox
        };
    }

    private string GetFolderTitle()
    {
        if (!string.IsNullOrWhiteSpace(currentCategory))
            return $"{currentCategory} Emails";
            
        return currentFolder switch
        {
            "sent" => "Sent Mail",
            "drafts" => "Drafts",
            "archived" => "Archived",
            _ => "Inbox"
        };
    }

    private Color GetCategoryColor(string category)
    {
        return category switch
        {
            "RFQ" => Color.Primary,
            "Quote" => Color.Secondary,
            "Order" => Color.Success,
            "Support" => Color.Info,
            "Marketing" => Color.Warning,
            _ => Color.Default
        };
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return dateTime.ToString("MMM dd");
    }

}