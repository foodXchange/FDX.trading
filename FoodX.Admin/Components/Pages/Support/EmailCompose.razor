@page "/support/email/compose"
@using FoodX.Admin.Services
@using System.Linq
@using System.Text.Json
@inject EmailServiceClient EmailService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Compose Email - FoodX Support</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="2" Class="pa-6">
        <MudText Typo="Typo.h4" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-2" />
            Compose Email
        </MudText>

        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="emailModel.To" 
                              Label="To" 
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="Recipient email is required"
                              HelperText="Enter recipient's email address"
                              AdornmentIcon="@Icons.Material.Filled.Person"
                              Adornment="Adornment.Start" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="emailModel.Cc" 
                              Label="CC (Optional)" 
                              Variant="Variant.Outlined"
                              HelperText="Carbon copy recipients (comma separated)"
                              AdornmentIcon="@Icons.Material.Filled.GroupAdd"
                              Adornment="Adornment.Start" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="emailModel.Bcc" 
                              Label="BCC (Optional)" 
                              Variant="Variant.Outlined"
                              HelperText="Blind carbon copy recipients (comma separated)"
                              AdornmentIcon="@Icons.Material.Filled.VisibilityOff"
                              Adornment="Adornment.Start" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="emailModel.Subject" 
                              Label="Subject" 
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="Subject is required"
                              AdornmentIcon="@Icons.Material.Filled.Subject"
                              Adornment="Adornment.Start" />
            </MudItem>

            <MudItem xs="12">
                <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                    <MudTabPanel Text="Rich Text Editor">
                        <MudTextField @bind-Value="emailModel.HtmlBody" 
                                      Label="Email Content (HTML)" 
                                      Variant="Variant.Outlined"
                                      Lines="15"
                                      Required="true"
                                      RequiredError="Email content is required"
                                      HelperText="You can use HTML tags for formatting" />
                        
                        <MudText Typo="Typo.caption" Class="mt-2">
                            Quick formatting: <strong>&lt;strong&gt;Bold&lt;/strong&gt;</strong>, 
                            <em>&lt;em&gt;Italic&lt;/em&gt;</em>, 
                            &lt;h1&gt;Heading&lt;/h1&gt;, 
                            &lt;p&gt;Paragraph&lt;/p&gt;, 
                            &lt;br&gt; for line break
                        </MudText>
                    </MudTabPanel>

                    <MudTabPanel Text="Plain Text">
                        <MudTextField @bind-Value="emailModel.PlainBody" 
                                      Label="Email Content (Plain Text)" 
                                      Variant="Variant.Outlined"
                                      Lines="15"
                                      HelperText="Plain text version (optional - will be auto-generated from HTML if not provided)" />
                    </MudTabPanel>

                    <MudTabPanel Text="Preview">
                        <MudPaper Elevation="1" Class="pa-4">
                            <MudText Typo="Typo.subtitle2" Color="Color.Primary">Preview:</MudText>
                            <MudDivider Class="my-2" />
                            
                            <MudText Typo="Typo.body2"><strong>To:</strong> @emailModel.To</MudText>
                            @if (!string.IsNullOrWhiteSpace(emailModel.Cc))
                            {
                                <MudText Typo="Typo.body2"><strong>CC:</strong> @emailModel.Cc</MudText>
                            }
                            <MudText Typo="Typo.body2"><strong>Subject:</strong> @emailModel.Subject</MudText>
                            
                            <MudDivider Class="my-3" />
                            
                            <div>@((MarkupString)(emailModel.HtmlBody ?? ""))</div>
                        </MudPaper>
                    </MudTabPanel>
                </MudTabs>
            </MudItem>

            <MudItem xs="12">
                <MudSelect @bind-Value="emailModel.Category" 
                           Label="Email Category" 
                           Variant="Variant.Outlined"
                           AdornmentIcon="@Icons.Material.Filled.Category"
                           Adornment="Adornment.Start">
                    <MudSelectItem Value="@("General")">General Communication</MudSelectItem>
                    <MudSelectItem Value="@("RFQ")">RFQ Related</MudSelectItem>
                    <MudSelectItem Value="@("Quote")">Quote Related</MudSelectItem>
                    <MudSelectItem Value="@("Order")">Order Related</MudSelectItem>
                    <MudSelectItem Value="@("Support")">Support</MudSelectItem>
                    <MudSelectItem Value="@("Marketing")">Marketing</MudSelectItem>
                    <MudSelectItem Value="@("System")">System Notification</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-3 d-flex justify-space-between align-center">
                    <div>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Default" 
                                   StartIcon="@Icons.Material.Filled.AttachFile"
                                   Disabled="true">
                            Attach Files (Coming Soon)
                        </MudButton>
                    </div>
                    
                    <div>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Default" 
                                   OnClick="SaveDraft"
                                   StartIcon="@Icons.Material.Filled.Drafts"
                                   Class="mr-2">
                            Save Draft
                        </MudButton>
                        
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Default" 
                                   OnClick="Cancel"
                                   Class="mr-2">
                            Cancel
                        </MudButton>
                        
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   OnClick="SendEmail"
                                   Disabled="@isSending"
                                   StartIcon="@Icons.Material.Filled.Send">
                            @if (isSending)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                <span>Sending...</span>
                            }
                            else
                            {
                                <span>Send Email</span>
                            }
                        </MudButton>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (recentEmails.Any())
    {
        <MudPaper Elevation="2" Class="pa-6 mt-4">
            <MudText Typo="Typo.h5" Class="mb-3">
                <MudIcon Icon="@Icons.Material.Filled.History" Class="mr-2" />
                Recently Sent Emails
            </MudText>
            
            <MudSimpleTable Hover="true" Dense="true">
                <thead>
                    <tr>
                        <th>To</th>
                        <th>Subject</th>
                        <th>Sent At</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var email in recentEmails)
                    {
                        <tr>
                            <td>@email.To</td>
                            <td>@email.Subject</td>
                            <td>@email.SentAt?.ToString("g")</td>
                            <td>
                                <MudChip T="string" Size="Size.Small" 
                                         Color="@(email.Status == "Sent" ? Color.Success : Color.Default)">
                                    @email.Status
                                </MudChip>
                            </td>
                            <td>
                                <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                               Size="Size.Small"
                                               title="Resend"
                                               OnClick="@(() => ResendEmail(email.Id))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudPaper>
    }
</MudContainer>

@code {
    private EmailModel emailModel = new();
    private bool isSending = false;
    private List<EmailDto> recentEmails = new();

    protected override async Task OnInitializedAsync()
    {
        emailModel.Category = "General";
        await LoadRecentEmails();
    }

    private async Task LoadRecentEmails()
    {
        try
        {
            // This would normally get the current user's email
            var userEmail = "noreply@fdx.trading";
            recentEmails = await EmailService.GetRecentSentEmailsAsync(userEmail, 5);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent emails: {ex.Message}");
        }
    }

    private async Task SendEmail()
    {
        if (string.IsNullOrWhiteSpace(emailModel.To) || string.IsNullOrWhiteSpace(emailModel.Subject))
        {
            Snackbar.Add("Please fill in all required fields", Severity.Warning);
            return;
        }

        isSending = true;
        try
        {
            // Auto-generate plain text from HTML if not provided
            if (string.IsNullOrWhiteSpace(emailModel.PlainBody) && !string.IsNullOrWhiteSpace(emailModel.HtmlBody))
            {
                emailModel.PlainBody = StripHtml(emailModel.HtmlBody);
            }

            var request = new EmailSendRequest
            {
                To = emailModel.To,
                Subject = emailModel.Subject,
                HtmlBody = emailModel.HtmlBody,
                PlainTextBody = emailModel.PlainBody,
                Category = emailModel.Category,
                Cc = string.IsNullOrWhiteSpace(emailModel.Cc) ? null : emailModel.Cc.Split(',').Select(x => x.Trim()).ToList(),
                Bcc = string.IsNullOrWhiteSpace(emailModel.Bcc) ? null : emailModel.Bcc.Split(',').Select(x => x.Trim()).ToList()
            };
            
            var result = await EmailService.SendEmailAsync(request);
            
            if (result.Success)
            {
                Snackbar.Add($"Email sent successfully to {emailModel.To}", Severity.Success);
                
                // Clear form
                emailModel = new EmailModel { Category = "General" };
                
                // Reload recent emails
                await LoadRecentEmails();
            }
            else
            {
                Snackbar.Add($"Failed to send email: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error sending email: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSending = false;
        }
    }

    private Task SaveDraft()
    {
        // For now, just show a message. Later we can implement draft saving
        Snackbar.Add("Draft saving functionality coming soon", Severity.Info);
        return Task.CompletedTask;
    }

    private async Task ResendEmail(int emailId)
    {
        try
        {
            var result = await EmailService.ResendEmailAsync(emailId);
            if (result.Success)
            {
                Snackbar.Add("Email resent successfully", Severity.Success);
                await LoadRecentEmails();
            }
            else
            {
                Snackbar.Add($"Failed to resend email: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error resending email: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/support/email/inbox");
    }

    private string StripHtml(string html)
    {
        if (string.IsNullOrWhiteSpace(html))
            return string.Empty;

        // Simple HTML stripping - in production, use a proper HTML parser
        var text = System.Text.RegularExpressions.Regex.Replace(html, "<.*?>", " ");
        text = System.Text.RegularExpressions.Regex.Replace(text, @"\s+", " ");
        return text.Trim();
    }

    public class EmailModel
    {
        public string To { get; set; } = string.Empty;
        public string Cc { get; set; } = string.Empty;
        public string Bcc { get; set; } = string.Empty;
        public string Subject { get; set; } = string.Empty;
        public string HtmlBody { get; set; } = string.Empty;
        public string PlainBody { get; set; } = string.Empty;
        public string Category { get; set; } = "General";
        public int? ReplyToEmailId { get; set; }
    }

}