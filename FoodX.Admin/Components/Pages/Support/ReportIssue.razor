@page "/support/report-issue"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@attribute [Authorize]
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<ReportIssue> Logger
@rendermode InteractiveServer

<PageTitle>Report Issue - FoodX Support</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-6" Elevation="2">
        <!-- Header -->
        <div class="mb-4">
            <MudText Typo="Typo.h4" Class="mb-2">
                <MudIcon Icon="@Icons.Material.Filled.BugReport" Class="mr-2" />
                Report an Issue
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Help us improve by reporting any issues or problems you encounter
            </MudText>
        </div>

        <!-- Issue Type Selection -->
        <MudAlert Severity="Severity.Info" Class="mb-4">
            <MudText>
                Please provide as much detail as possible to help us resolve your issue quickly.
                For urgent matters, contact support directly at <strong>support@fdx.trading</strong>
            </MudText>
        </MudAlert>

        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <!-- Issue Type -->
                <MudItem xs="12">
                    <MudSelect @bind-Value="issueReport.IssueType" 
                               Label="Issue Type" 
                               Required="true"
                               RequiredError="Please select an issue type"
                               Variant="Variant.Outlined"
                               AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("Bug")">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.BugReport" Class="mr-2" Size="Size.Small" />
                                Bug - Something isn't working correctly
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="@("Feature Request")">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Lightbulb" Class="mr-2" Size="Size.Small" />
                                Feature Request - Suggest an improvement
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="@("Performance")">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Speed" Class="mr-2" Size="Size.Small" />
                                Performance - Slow loading or responsiveness
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="@("Security")">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Security" Class="mr-2" Size="Size.Small" />
                                Security - Security concern or vulnerability
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="@("Data Issue")">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.DataUsage" Class="mr-2" Size="Size.Small" />
                                Data Issue - Incorrect or missing data
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="@("Other")">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Help" Class="mr-2" Size="Size.Small" />
                                Other - Something else
                            </div>
                        </MudSelectItem>
                    </MudSelect>
                </MudItem>

                <!-- Priority -->
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="issueReport.Priority" 
                               Label="Priority" 
                               Required="true"
                               RequiredError="Please select a priority"
                               Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Low")">
                            <MudChip T="string" Color="Color.Info" Size="Size.Small">Low - Can wait</MudChip>
                        </MudSelectItem>
                        <MudSelectItem Value="@("Medium")">
                            <MudChip T="string" Color="Color.Warning" Size="Size.Small">Medium - Soon as possible</MudChip>
                        </MudSelectItem>
                        <MudSelectItem Value="@("High")">
                            <MudChip T="string" Color="Color.Error" Size="Size.Small">High - Urgent</MudChip>
                        </MudSelectItem>
                        <MudSelectItem Value="@("Critical")">
                            <MudChip T="string" Color="Color.Error" Size="Size.Small" Variant="Variant.Filled">Critical - System down</MudChip>
                        </MudSelectItem>
                    </MudSelect>
                </MudItem>

                <!-- Affected Area -->
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="issueReport.AffectedArea" 
                               Label="Affected Area" 
                               Required="true"
                               RequiredError="Please select the affected area"
                               Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Dashboard")">Dashboard</MudSelectItem>
                        <MudSelectItem Value="@("Products")">Products</MudSelectItem>
                        <MudSelectItem Value="@("Suppliers")">Suppliers</MudSelectItem>
                        <MudSelectItem Value="@("Buyers")">Buyers</MudSelectItem>
                        <MudSelectItem Value="@("Orders")">Orders</MudSelectItem>
                        <MudSelectItem Value="@("RFQs")">RFQs</MudSelectItem>
                        <MudSelectItem Value="@("Quotes")">Quotes</MudSelectItem>
                        <MudSelectItem Value="@("AI Search")">AI Search</MudSelectItem>
                        <MudSelectItem Value="@("Authentication")">Login/Authentication</MudSelectItem>
                        <MudSelectItem Value="@("Reports")">Reports</MudSelectItem>
                        <MudSelectItem Value="@("Settings")">Settings</MudSelectItem>
                        <MudSelectItem Value="@("Other")">Other</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <!-- Title -->
                <MudItem xs="12">
                    <MudTextField @bind-Value="issueReport.Title" 
                                  Label="Issue Title" 
                                  Required="true"
                                  RequiredError="Please provide a brief title"
                                  Variant="Variant.Outlined"
                                  Counter="100"
                                  MaxLength="100"
                                  Immediate="true"
                                  HelperText="Brief description of the issue" />
                </MudItem>

                <!-- Description -->
                <MudItem xs="12">
                    <MudTextField @bind-Value="issueReport.Description" 
                                  Label="Detailed Description" 
                                  Required="true"
                                  RequiredError="Please provide a detailed description"
                                  Variant="Variant.Outlined"
                                  Lines="6"
                                  Counter="2000"
                                  MaxLength="2000"
                                  Immediate="true"
                                  HelperText="Please describe the issue in detail. Include what you were doing when it occurred." />
                </MudItem>

                <!-- Steps to Reproduce -->
                <MudItem xs="12">
                    <MudTextField @bind-Value="issueReport.StepsToReproduce" 
                                  Label="Steps to Reproduce (if applicable)" 
                                  Variant="Variant.Outlined"
                                  Lines="4"
                                  HelperText="1. Go to... 2. Click on... 3. See error..." />
                </MudItem>

                <!-- Expected vs Actual -->
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="issueReport.ExpectedBehavior" 
                                  Label="Expected Behavior" 
                                  Variant="Variant.Outlined"
                                  Lines="3"
                                  HelperText="What should happen?" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="issueReport.ActualBehavior" 
                                  Label="Actual Behavior" 
                                  Variant="Variant.Outlined"
                                  Lines="3"
                                  HelperText="What actually happened?" />
                </MudItem>

                <!-- Browser and Device Info -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-2">Environment Information</MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="issueReport.Browser" 
                                  Label="Browser" 
                                  Variant="Variant.Outlined"
                                  HelperText="e.g., Chrome 120, Firefox 121" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="issueReport.OperatingSystem" 
                                  Label="Operating System" 
                                  Variant="Variant.Outlined"
                                  HelperText="e.g., Windows 11, macOS 14" />
                </MudItem>

                <!-- URL -->
                <MudItem xs="12">
                    <MudTextField @bind-Value="issueReport.PageUrl" 
                                  Label="Page URL (where the issue occurred)" 
                                  Variant="Variant.Outlined"
                                  HelperText="Automatically captured from previous page" />
                </MudItem>

                <!-- Screenshot Upload -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-2">Attachments</MudText>
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" 
                                   FilesChanged="OnFilesChanged"
                                   Accept="image/*,.pdf,.doc,.docx,.txt"
                                   MaximumFileCount="5">
                        <ActivatorContent>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Upload Screenshots or Documents
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    @if (uploadedFiles.Any())
                    {
                        <MudList T="string" Class="mt-2">
                            @foreach (var file in uploadedFiles)
                            {
                                <MudListItem T="string">
                                    <div class="d-flex align-center justify-space-between">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@GetFileIcon(file.Name)" Class="mr-2" />
                                            <MudText>@file.Name (@FormatFileSize(file.Size))</MudText>
                                        </div>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                       Color="Color.Error" 
                                                       Size="Size.Small"
                                                       OnClick="() => RemoveFile(file)" />
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>

                <!-- Contact Preference -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-2">Contact Preferences</MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="issueReport.ContactEmail" 
                                  Label="Contact Email" 
                                  Required="true"
                                  RequiredError="Email is required"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email"
 />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="issueReport.ContactPhone" 
                                  Label="Contact Phone (Optional)" 
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Telephone" />
                </MudItem>

                <MudItem xs="12">
                    <MudCheckBox @bind-Value="issueReport.AllowFollowup" 
                                 Label="I agree to be contacted about this issue" 
                                 Color="Color.Primary" />
                </MudItem>

                <!-- Additional Options -->
                <MudItem xs="12">
                    <MudExpansionPanels Elevation="0">
                        <MudExpansionPanel Text="Additional Options">
                            <MudCheckBox @bind-Value="issueReport.IncludeSystemInfo" 
                                         Label="Include system diagnostic information" 
                                         Color="Color.Primary"
                                         Class="mb-2" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                This includes browser version, screen resolution, and other technical details that may help resolve the issue.
                            </MudText>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudItem>

                <!-- Submit Buttons -->
                <MudItem xs="12" Class="mt-4">
                    <div class="d-flex gap-2 justify-end">
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Default"
                                   OnClick="Cancel">
                            Cancel
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save"
                                   OnClick="SaveDraft"
                                   Disabled="@isSubmitting">
                            Save as Draft
                        </MudButton>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Send"
                                   OnClick="SubmitIssue"
                                   Disabled="@(!success || isSubmitting)">
                            @if (isSubmitting)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                <span>Submitting...</span>
                            }
                            else
                            {
                                <span>Submit Issue</span>
                            }
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>

    <!-- Recently Reported Issues -->
    <MudPaper Class="pa-6 mt-4" Elevation="2">
        <MudText Typo="Typo.h6" Class="mb-4">Your Recent Issues</MudText>
        @if (recentIssues.Any())
        {
            <MudSimpleTable Hover="true" Dense="true">
                <thead>
                    <tr>
                        <th>Issue #</th>
                        <th>Title</th>
                        <th>Type</th>
                        <th>Priority</th>
                        <th>Status</th>
                        <th>Submitted</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var issue in recentIssues)
                    {
                        <tr>
                            <td><MudText Color="Color.Primary">#@issue.Id</MudText></td>
                            <td>@issue.Title</td>
                            <td><MudChip T="string" Size="Size.Small">@issue.Type</MudChip></td>
                            <td><MudChip T="string" Size="Size.Small" Color="@GetPriorityColor(issue.Priority)">@issue.Priority</MudChip></td>
                            <td><MudChip T="string" Size="Size.Small" Color="@GetStatusColor(issue.Status)">@issue.Status</MudChip></td>
                            <td>@issue.SubmittedDate.ToString("MMM dd, yyyy")</td>
                            <td>
                                <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                               Size="Size.Small" 
                                               Color="Color.Primary"
                                               OnClick="() => ViewIssue(issue)" />
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
        else
        {
            <MudAlert Severity="Severity.Info">
                You haven't reported any issues yet.
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private MudForm form = default!;
    private bool success;
    private string[] errors = { };
    private bool isSubmitting = false;
    private string currentUrl = "";
    private string userEmail = "";
    private List<IBrowserFile> uploadedFiles = new();
    private List<RecentIssue> recentIssues = new();
    
    private IssueReport issueReport = new();
    
    protected override async Task OnInitializedAsync()
    {
        // Get current user's email
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userEmail = authState.User?.Identity?.Name ?? "";
        issueReport.ContactEmail = userEmail;
        
        // Get the referrer URL (where user came from)
        currentUrl = Navigation.Uri;
        issueReport.PageUrl = currentUrl;
        
        // Load user's recent issues (mock data for now)
        LoadRecentIssues();
        
        // Capture browser info via JavaScript interop (simplified for now)
        issueReport.Browser = "Detected automatically";
        issueReport.OperatingSystem = "Detected automatically";
    }
    
    private void LoadRecentIssues()
    {
        // Mock data - in production, load from database
        recentIssues = new List<RecentIssue>
        {
            new RecentIssue 
            { 
                Id = 1247, 
                Title = "Unable to export supplier list", 
                Type = "Bug", 
                Priority = "Medium", 
                Status = "In Progress",
                SubmittedDate = DateTime.Now.AddDays(-3)
            },
            new RecentIssue 
            { 
                Id = 1235, 
                Title = "Add bulk import for products", 
                Type = "Feature Request", 
                Priority = "Low", 
                Status = "Under Review",
                SubmittedDate = DateTime.Now.AddDays(-7)
            }
        };
    }
    
    private void OnFilesChanged(IReadOnlyList<IBrowserFile> files)
    {
        uploadedFiles.Clear();
        
        foreach (var file in files)
        {
            // Limit file size to 5MB
            if (file.Size > 5 * 1024 * 1024)
            {
                Snackbar.Add($"File {file.Name} is too large. Maximum size is 5MB.", Severity.Warning);
                continue;
            }
            
            uploadedFiles.Add(file);
        }
        
        if (uploadedFiles.Any())
        {
            Snackbar.Add($"{uploadedFiles.Count} file(s) selected", Severity.Info);
        }
    }
    
    private void RemoveFile(IBrowserFile file)
    {
        uploadedFiles.Remove(file);
    }
    
    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => Icons.Material.Filled.PictureAsPdf,
            ".doc" or ".docx" => Icons.Material.Filled.Description,
            ".txt" => Icons.Material.Filled.TextSnippet,
            _ when extension.StartsWith(".png") || extension.StartsWith(".jpg") || extension.StartsWith(".jpeg") || extension.StartsWith(".gif") => Icons.Material.Filled.Image,
            _ => Icons.Material.Filled.AttachFile
        };
    }
    
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        
        return $"{size:0.##} {sizes[order]}";
    }
    
    private Color GetPriorityColor(string priority) => priority switch
    {
        "Critical" => Color.Error,
        "High" => Color.Error,
        "Medium" => Color.Warning,
        "Low" => Color.Info,
        _ => Color.Default
    };
    
    private Color GetStatusColor(string status) => status switch
    {
        "New" => Color.Info,
        "In Progress" => Color.Warning,
        "Under Review" => Color.Primary,
        "Resolved" => Color.Success,
        "Closed" => Color.Default,
        _ => Color.Default
    };
    
    private async Task SaveDraft()
    {
        issueReport.Status = "Draft";
        // In production, save to database
        Snackbar.Add("Issue report saved as draft", Severity.Success);
        await Task.Delay(500);
    }
    
    private async Task SubmitIssue()
    {
        await form.Validate();
        
        if (success)
        {
            isSubmitting = true;
            
            try
            {
                // Generate ticket number
                var ticketNumber = $"TKT-{DateTime.Now:yyyyMMdd}-{Random.Shared.Next(1000, 9999)}";
                issueReport.TicketNumber = ticketNumber;
                issueReport.Status = "New";
                issueReport.SubmittedDate = DateTime.Now;
                
                // In production: 
                // 1. Save to database
                // 2. Send email notification
                // 3. Upload attachments to storage
                // 4. Create support ticket
                
                await Task.Delay(2000); // Simulate API call
                
                Snackbar.Add($"Issue reported successfully! Ticket #{ticketNumber}", Severity.Success);
                
                // Show confirmation dialog or redirect
                await Task.Delay(1000);
                Navigation.NavigateTo("/support/my-tickets");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error submitting issue report");
                Snackbar.Add("An error occurred while submitting your issue. Please try again.", Severity.Error);
            }
            finally
            {
                isSubmitting = false;
            }
        }
    }
    
    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }
    
    private void ViewIssue(RecentIssue issue)
    {
        Navigation.NavigateTo($"/support/ticket/{issue.Id}");
    }
    
    private class IssueReport
    {
        public string TicketNumber { get; set; } = "";
        public string IssueType { get; set; } = "";
        public string Priority { get; set; } = "Medium";
        public string AffectedArea { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string StepsToReproduce { get; set; } = "";
        public string ExpectedBehavior { get; set; } = "";
        public string ActualBehavior { get; set; } = "";
        public string Browser { get; set; } = "";
        public string OperatingSystem { get; set; } = "";
        public string PageUrl { get; set; } = "";
        public string ContactEmail { get; set; } = "";
        public string ContactPhone { get; set; } = "";
        public bool AllowFollowup { get; set; } = true;
        public bool IncludeSystemInfo { get; set; } = true;
        public string Status { get; set; } = "New";
        public DateTime SubmittedDate { get; set; }
    }
    
    private class RecentIssue
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Type { get; set; } = "";
        public string Priority { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTime SubmittedDate { get; set; }
    }
}