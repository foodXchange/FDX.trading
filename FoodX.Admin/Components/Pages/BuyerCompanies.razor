@page "/buyer-companies"
@using FoodX.Admin.Data
@using FoodX.Admin.Models
@using FoodX.Admin.Components.Dialogs
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@inject FoodXDbContext DbContext
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IMemoryCache MemoryCache
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Buyer Companies</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Buyer Companies Database</MudText>
    
    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudTextField @bind-Value="searchTerm" Label="Search Companies" 
                              Variant="Variant.Outlined" 
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate="true"
                              OnKeyUp="@(async (e) => { if (e.Key == "Enter") await SearchCompanies(); })" />
            </MudItem>
            <MudItem xs="12" md="2">
                <MudSelect @bind-Value="selectedType" Label="Type" Variant="Variant.Outlined">
                    <MudSelectItem Value="@("")">All Types</MudSelectItem>
                    <MudSelectItem Value="@("Retail Chain")">Retail Chain</MudSelectItem>
                    <MudSelectItem Value="@("Hotel")">Hotel</MudSelectItem>
                    <MudSelectItem Value="@("Restaurant")">Restaurant</MudSelectItem>
                    <MudSelectItem Value="@("Distributor")">Distributor</MudSelectItem>
                    <MudSelectItem Value="@("Catering")">Catering</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="2">
                <MudSelect @bind-Value="selectedRegion" Label="Region" Variant="Variant.Outlined">
                    <MudSelectItem Value="@("")">All Regions</MudSelectItem>
                    <MudSelectItem Value="@("Center")">Center</MudSelectItem>
                    <MudSelectItem Value="@("North")">North</MudSelectItem>
                    <MudSelectItem Value="@("South")">South</MudSelectItem>
                    <MudSelectItem Value="@("Jerusalem")">Jerusalem</MudSelectItem>
                    <MudSelectItem Value="@("Haifa")">Haifa</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.FilterList"
                           OnClick="SearchCompanies">
                    Apply Filters
                </MudButton>
            </MudItem>
            <MudItem xs="12" md="2">
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" 
                           StartIcon="@Icons.Material.Filled.Clear"
                           OnClick="ClearFilters">
                    Clear
                </MudButton>
            </MudItem>
        </MudGrid>
        
        <MudText Typo="Typo.body2" Class="mt-2">
            Total Companies: <strong>@totalCount</strong> | Showing: <strong>@companies.Count</strong>
        </MudText>
    </MudPaper>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudDataGrid Items="@companies" Filterable="false" Hideable="true" 
                     Hover="true" Dense="true" RowsPerPage="25">
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="ID" Sortable="true" />
                <PropertyColumn Property="x => x.Company" Title="Company Name" Sortable="true" />
                <PropertyColumn Property="x => x.Type" Title="Type" Sortable="true" />
                <PropertyColumn Property="x => x.Categories" Title="Categories" />
                <PropertyColumn Property="x => x.Region" Title="Region" Sortable="true" />
                <PropertyColumn Property="x => x.Markets" Title="Markets" />
                <TemplateColumn Title="AI Score">
                    <CellTemplate>
                        @if (context.Item.EngagementReadinessScore.HasValue)
                        {
                            <MudTooltip Text="@($"Engagement: {context.Item.EngagementReadinessScore}%, Purchasing Power: {context.Item.PurchasingPowerScore ?? 0}%")">
                                <MudChip T="string" Size="Size.Small" 
                                        Color="@GetAIScoreColor(context.Item.EngagementReadinessScore.Value)"
                                        Icon="@Icons.Material.Filled.AutoAwesome">
                                    @context.Item.EngagementReadinessScore%
                                </MudChip>
                            </MudTooltip>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Contact">
                    <CellTemplate>
                        @if (!string.IsNullOrEmpty(context.Item.ProcurementEmail))
                        {
                            <MudTooltip Text="@context.Item.ProcurementEmail">
                                <MudIcon Icon="@Icons.Material.Filled.Email" Size="Size.Small" Color="Color.Primary" />
                            </MudTooltip>
                        }
                        @if (!string.IsNullOrEmpty(context.Item.Phone))
                        {
                            <MudTooltip Text="@context.Item.Phone">
                                <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Color="Color.Secondary" />
                            </MudTooltip>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Size">
                    <CellTemplate>
                        <MudChip T="string" Size="Size.Small" Color="@GetSizeColor(context.Item.Size)">
                            @(context.Item.Size ?? "Unknown")
                        </MudChip>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                       Size="Size.Small" 
                                       Color="Color.Primary"
                                       OnClick="@(() => ViewCompanyDetails(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                       Size="Size.Small" 
                                       Color="Color.Secondary"
                                       OnClick="@(() => ImportToCompanies(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager />
            </PagerContent>
        </MudDataGrid>
    }
</MudContainer>

@code {
    private List<FoodXBuyer> companies = new();
    private bool isLoading = true;
    private string searchTerm = "";
    private string selectedType = "";
    private string selectedRegion = "";
    private int totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        isLoading = true;
        try
        {
            // Create cache key based on filters
            var cacheKey = $"buyers_{searchTerm}_{selectedType}_{selectedRegion}";
            
            // Try to get from cache first
            if (!MemoryCache.TryGetValue(cacheKey, out List<FoodXBuyer>? cachedCompanies))
            {
                var query = DbContext.FoodXBuyers
                    .AsNoTracking() // Improve performance for read-only data
                    .AsQueryable();
                
                // Get total count before filtering (cache this separately)
                if (!MemoryCache.TryGetValue("buyers_total_count", out int cachedCount))
                {
                    cachedCount = await query.CountAsync();
                    MemoryCache.Set("buyers_total_count", cachedCount, TimeSpan.FromMinutes(5));
                }
                totalCount = cachedCount;
                
                // Apply filters
                if (!string.IsNullOrWhiteSpace(searchTerm))
                {
                    var searchTermLower = searchTerm.ToLower();
                    query = query.Where(c => 
                        (c.Company != null && c.Company.ToLower().Contains(searchTermLower)) ||
                        (c.ProcurementEmail != null && c.ProcurementEmail.ToLower().Contains(searchTermLower)) ||
                        (c.ContactEmail != null && c.ContactEmail.ToLower().Contains(searchTermLower)) ||
                        (c.KeyContact != null && c.KeyContact.ToLower().Contains(searchTermLower)));
                }
                
                if (!string.IsNullOrWhiteSpace(selectedType))
                {
                    query = query.Where(c => c.Type == selectedType);
                }
                
                if (!string.IsNullOrWhiteSpace(selectedRegion))
                {
                    query = query.Where(c => c.Region == selectedRegion);
                }
                
                // Execute query with optimized projection
                cachedCompanies = await query
                    .OrderBy(c => c.Company)
                    .Take(500) // Limit results for performance
                    .ToListAsync();
                
                // Cache the results for 2 minutes
                var cacheOptions = new MemoryCacheEntryOptions()
                    .SetSlidingExpiration(TimeSpan.FromMinutes(2))
                    .SetAbsoluteExpiration(TimeSpan.FromMinutes(5));
                    
                MemoryCache.Set(cacheKey, cachedCompanies, cacheOptions);
            }
            
            companies = cachedCompanies ?? new List<FoodXBuyer>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading companies: {ex.Message}", Severity.Error);
            companies = new List<FoodXBuyer>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchCompanies()
    {
        await LoadCompanies();
    }

    private async Task ClearFilters()
    {
        searchTerm = "";
        selectedType = "";
        selectedRegion = "";
        await LoadCompanies();
    }

    private Color GetSizeColor(string? size)
    {
        return size switch
        {
            "Large" => Color.Success,
            "Medium" => Color.Info,
            "Small" => Color.Warning,
            _ => Color.Default
        };
    }

    private async Task ViewCompanyDetails(FoodXBuyer company)
    {
        var parameters = new DialogParameters
        {
            { "Company", company }
        };
        
        var options = new DialogOptions 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<ViewBuyerCompanyDialog>("Company Details", parameters, options);
        await dialog.Result;
    }

    private async Task ImportToCompanies(FoodXBuyer buyerCompany)
    {
        try
        {
            // Check if company already exists
            var exists = await DbContext.Companies
                .AsNoTracking()
                .AnyAsync(c => c.Name == buyerCompany.Company);
                
            if (exists)
            {
                Snackbar.Add("Company already exists in the main database", Severity.Warning);
                return;
            }
            
            // Create new company
            var company = new Company
            {
                Name = buyerCompany.Company ?? "Unknown",
                CompanyType = "Buyer",
                Website = buyerCompany.Website,
                MainEmail = buyerCompany.ProcurementEmail ?? buyerCompany.ContactEmail,
                MainPhone = buyerCompany.Phone,
                Address = buyerCompany.Address,
                Country = buyerCompany.Region,
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };
            
            DbContext.Companies.Add(company);
            await DbContext.SaveChangesAsync();
            
            // Clear cache after import
            ClearCache();
            
            Snackbar.Add($"Company '{company.Name}' imported successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error importing company: {ex.Message}", Severity.Error);
        }
    }
    
    private void ClearCache()
    {
        // Clear all buyer-related cache entries
        MemoryCache.Remove("buyers_total_count");
        // Clear filter-based cache entries
        var cacheKey = $"buyers_{searchTerm}_{selectedType}_{selectedRegion}";
        MemoryCache.Remove(cacheKey);
    }
    
    private Color GetAIScoreColor(int score)
    {
        return score switch
        {
            >= 80 => Color.Success,
            >= 60 => Color.Info,
            >= 40 => Color.Warning,
            _ => Color.Default
        };
    }
    
    public void Dispose()
    {
        // Clean up resources if needed
        ClearCache();
    }
}