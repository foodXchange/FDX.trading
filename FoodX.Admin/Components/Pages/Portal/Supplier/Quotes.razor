@page "/portal/supplier/quotes"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "SuperAdmin,Admin,Supplier")]
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Quotes - FoodX Supplier Portal</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.Receipt" Class="mr-2" />
                Quote Management
            </MudText>
        </MudItem>

        <!-- Quick Stats -->
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Total Quotes</MudText>
                    <MudText Typo="Typo.h4">32</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Pending Review</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Warning">12</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Accepted</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Success">15</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">This Month Value</MudText>
                    <MudText Typo="Typo.h4">€89,450</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Filters and Actions -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="2">
                <div class="d-flex justify-space-between align-center mb-4">
                    <div class="d-flex align-center">
                        <MudTextField @bind-Value="searchString" 
                                    Placeholder="Search quotes..." 
                                    Adornment="Adornment.Start" 
                                    AdornmentIcon="@Icons.Material.Filled.Search" 
                                    IconSize="Size.Medium" 
                                    Class="mr-4" />
                        <MudSelect @bind-Value="selectedStatus" Placeholder="All Status" Class="mr-2">
                            <MudSelectItem Value="@("All")">All Status</MudSelectItem>
                            <MudSelectItem Value="@("Draft")">Draft</MudSelectItem>
                            <MudSelectItem Value="@("Sent")">Sent</MudSelectItem>
                            <MudSelectItem Value="@("Under Review")">Under Review</MudSelectItem>
                            <MudSelectItem Value="@("Accepted")">Accepted</MudSelectItem>
                            <MudSelectItem Value="@("Rejected")">Rejected</MudSelectItem>
                            <MudSelectItem Value="@("Expired")">Expired</MudSelectItem>
                        </MudSelect>
                        <MudDateRangePicker @bind-DateRange="dateRange" Label="Date Range" Class="mr-2" />
                    </div>
                    <div>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Secondary" 
                                   StartIcon="@Icons.Material.Filled.FileDownload"
                                   OnClick="ExportQuotes"
                                   Class="mr-2">
                            Export
                        </MudButton>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="CreateNewQuote">
                            Create Quote
                        </MudButton>
                    </div>
                </div>
                
                <MudTable Items="@filteredQuotes" Hover="true" Dense="true" Filter="new Func<QuoteItem,bool>(FilterFunc)">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.QuoteNumber)">Quote #</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.RFQNumber)">RFQ #</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.BuyerCompany)">Buyer</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.ProductName)">Product</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.Quantity)">Quantity</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.TotalAmount)">Total Amount</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.QuoteDate)">Quote Date</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.ExpiryDate)">Expires</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<QuoteItem, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.body2" Color="Color.Primary">@context.QuoteNumber</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.body2">@context.RFQNumber</MudText>
                        </MudTd>
                        <MudTd>
                            <div>
                                <MudText Typo="Typo.body2">@context.BuyerCompany</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@context.ContactPerson</MudText>
                            </div>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.body2">@context.ProductName</MudText>
                        </MudTd>
                        <MudTd>@context.Quantity @context.Unit</MudTd>
                        <MudTd>
                            <MudText Typo="Typo.body2" Color="Color.Success">
                                <strong>€@context.TotalAmount.ToString("N2")</strong>
                            </MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                €@context.UnitPrice.ToString("N2")/@context.Unit
                            </MudText>
                        </MudTd>
                        <MudTd>@context.QuoteDate.ToString("MMM dd")</MudTd>
                        <MudTd>
                            <MudText Color="@(context.ExpiryDate < DateTime.Now.AddDays(3) ? Color.Warning : Color.Default)">
                                @context.ExpiryDate.ToString("MMM dd")
                            </MudText>
                        </MudTd>
                        <MudTd>
                            <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(context.Status)">
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                <MudMenuItem OnClick="() => ViewQuote(context)">
                                    <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" />
                                    View
                                </MudMenuItem>
                                @if (context.Status == "Draft")
                                {
                                    <MudMenuItem OnClick="() => EditQuote(context)">
                                        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
                                        Edit
                                    </MudMenuItem>
                                    <MudMenuItem OnClick="() => SendQuote(context)">
                                        <MudIcon Icon="@Icons.Material.Filled.Send" Class="mr-2" />
                                        Send
                                    </MudMenuItem>
                                }
                                @if (context.Status == "Sent" || context.Status == "Under Review")
                                {
                                    <MudMenuItem OnClick="() => WithdrawQuote(context)">
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Class="mr-2" />
                                        Withdraw
                                    </MudMenuItem>
                                }
                                <MudMenuItem OnClick="() => DuplicateQuote(context)">
                                    <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Class="mr-2" />
                                    Duplicate
                                </MudMenuItem>
                                <MudMenuItem OnClick="() => DownloadPDF(context)">
                                    <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Class="mr-2" />
                                    Download PDF
                                </MudMenuItem>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Recent Activity -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h6" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.History" Class="mr-2" />
                    Recent Quote Activity
                </MudText>
                
                <MudTimeline>
                    @foreach (var activity in _recentActivity.Take(5))
                    {
                        <MudTimelineItem Color="@GetActivityColor(activity.Type)" Size="Size.Small">
                            <ItemContent>
                                <MudText Typo="Typo.body2">@activity.Description</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @activity.Timestamp.ToString("MMM dd, HH:mm")
                                </MudText>
                            </ItemContent>
                        </MudTimelineItem>
                    }
                </MudTimeline>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- Quote Details Dialog -->
<MudDialog @bind-Visible="showQuoteDialog" Options="new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true }">
    <DialogContent>
        @if (selectedQuote != null)
        {
            <MudText Typo="Typo.h5" Class="mb-4">Quote Details - @selectedQuote.QuoteNumber</MudText>
            
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudText Typo="Typo.h6" Class="mb-2">Quote Information</MudText>
                        <MudText><strong>Quote #:</strong> @selectedQuote.QuoteNumber</MudText>
                        <MudText><strong>RFQ #:</strong> @selectedQuote.RFQNumber</MudText>
                        <MudText><strong>Quote Date:</strong> @selectedQuote.QuoteDate.ToString("MMM dd, yyyy")</MudText>
                        <MudText><strong>Expiry Date:</strong> @selectedQuote.ExpiryDate.ToString("MMM dd, yyyy")</MudText>
                        <MudText><strong>Status:</strong> @selectedQuote.Status</MudText>
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudText Typo="Typo.h6" Class="mb-2">Buyer Information</MudText>
                        <MudText><strong>Company:</strong> @selectedQuote.BuyerCompany</MudText>
                        <MudText><strong>Contact:</strong> @selectedQuote.ContactPerson</MudText>
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudText Typo="Typo.h6" Class="mb-2">Product Details</MudText>
                        <MudText><strong>Product:</strong> @selectedQuote.ProductName</MudText>
                        <MudText><strong>Quantity:</strong> @selectedQuote.Quantity @selectedQuote.Unit</MudText>
                        <MudText><strong>Unit Price:</strong> €@selectedQuote.UnitPrice.ToString("N2")</MudText>
                        <MudText><strong>Total Amount:</strong> €@selectedQuote.TotalAmount.ToString("N2")</MudText>
                        
                        @if (!string.IsNullOrEmpty(selectedQuote.Notes))
                        {
                            <MudText Class="mt-2"><strong>Notes:</strong></MudText>
                            <MudText>@selectedQuote.Notes</MudText>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => showQuoteDialog = false">Close</MudButton>
        @if (selectedQuote?.Status == "Draft")
        {
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="() => EditQuote(selectedQuote)">
                Edit Quote
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => SendQuote(selectedQuote)">
                Send Quote
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    private string searchString = "";
    private string selectedStatus = "All";
    private DateRange? dateRange = null;
    private List<QuoteItem> _quotes = new();
    private List<ActivityItem> _recentActivity = new();
    private bool showQuoteDialog = false;
    private QuoteItem? selectedQuote = null;
    
    private IEnumerable<QuoteItem> filteredQuotes
    {
        get
        {
            var filtered = _quotes.AsEnumerable();
            
            if (selectedStatus != "All")
                filtered = filtered.Where(q => q.Status == selectedStatus);
                
            if (dateRange?.Start != null && dateRange?.End != null)
                filtered = filtered.Where(q => q.QuoteDate >= dateRange.Start && q.QuoteDate <= dateRange.End);
                
            return filtered;
        }
    }
    
    protected override void OnInitialized()
    {
        LoadQuotes();
        LoadRecentActivity();
    }
    
    private void LoadQuotes()
    {
        // Mock quote data
        _quotes = new List<QuoteItem>
        {
            new QuoteItem 
            { 
                Id = 1, QuoteNumber = "QUO-2024-001", RFQNumber = "RFQ-2024-001", 
                BuyerCompany = "Metro Restaurant Group", ContactPerson = "John Smith",
                ProductName = "Organic Whole Milk", Quantity = 500, Unit = "Liters", 
                UnitPrice = 1.80m, TotalAmount = 900.00m, 
                QuoteDate = DateTime.Now.AddDays(-3), ExpiryDate = DateTime.Now.AddDays(7), 
                Status = "Sent", Notes = "Premium organic milk from local farms"
            },
            new QuoteItem 
            { 
                Id = 2, QuoteNumber = "QUO-2024-002", RFQNumber = "RFQ-2024-002", 
                BuyerCompany = "Fresh Market Belgium", ContactPerson = "Marie Dubois",
                ProductName = "Fresh Tomatoes", Quantity = 200, Unit = "Kg", 
                UnitPrice = 3.20m, TotalAmount = 640.00m, 
                QuoteDate = DateTime.Now.AddDays(-5), ExpiryDate = DateTime.Now.AddDays(2), 
                Status = "Under Review", Notes = "Grade A quality, locally sourced"
            },
            new QuoteItem 
            { 
                Id = 3, QuoteNumber = "QUO-2024-003", RFQNumber = "RFQ-2024-003", 
                BuyerCompany = "Hotel Brussels Premium", ContactPerson = "Pierre Laurent",
                ProductName = "Premium Beef Tenderloin", Quantity = 50, Unit = "Kg", 
                UnitPrice = 45.00m, TotalAmount = 2250.00m, 
                QuoteDate = DateTime.Now.AddDays(-1), ExpiryDate = DateTime.Now.AddDays(14), 
                Status = "Draft", Notes = "Premium grade, grass-fed"
            },
            new QuoteItem 
            { 
                Id = 4, QuoteNumber = "QUO-2024-004", RFQNumber = "RFQ-2024-004", 
                BuyerCompany = "Café Chain Plus", ContactPerson = "Anna Van Der Berg",
                ProductName = "Arabica Coffee Beans", Quantity = 100, Unit = "Kg", 
                UnitPrice = 18.50m, TotalAmount = 1850.00m, 
                QuoteDate = DateTime.Now.AddDays(-7), ExpiryDate = DateTime.Now.AddDays(-2), 
                Status = "Accepted", Notes = "Fair trade certified, medium roast"
            },
            new QuoteItem 
            { 
                Id = 5, QuoteNumber = "QUO-2024-005", RFQNumber = "RFQ-2024-005", 
                BuyerCompany = "Bakery Delights", ContactPerson = "Sophie Martinez",
                ProductName = "Premium Flour", Quantity = 300, Unit = "Kg", 
                UnitPrice = 0.85m, TotalAmount = 255.00m, 
                QuoteDate = DateTime.Now.AddDays(-10), ExpiryDate = DateTime.Now.AddDays(-5), 
                Status = "Rejected", Notes = "Type 00 flour for artisan baking"
            },
        };
    }
    
    private void LoadRecentActivity()
    {
        _recentActivity = new List<ActivityItem>
        {
            new ActivityItem { Type = "sent", Description = "Quote QUO-2024-003 sent to Hotel Brussels Premium", Timestamp = DateTime.Now.AddHours(-2) },
            new ActivityItem { Type = "accepted", Description = "Quote QUO-2024-004 accepted by Café Chain Plus", Timestamp = DateTime.Now.AddHours(-5) },
            new ActivityItem { Type = "created", Description = "New quote QUO-2024-005 created for Bakery Delights", Timestamp = DateTime.Now.AddHours(-8) },
            new ActivityItem { Type = "updated", Description = "Quote QUO-2024-002 updated with new pricing", Timestamp = DateTime.Now.AddDays(-1) },
            new ActivityItem { Type = "expired", Description = "Quote QUO-2024-001 expired without response", Timestamp = DateTime.Now.AddDays(-2) },
        };
    }
    
    private bool FilterFunc(QuoteItem element) => FilterFunc(element, searchString);

    private bool FilterFunc(QuoteItem element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.QuoteNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.RFQNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.BuyerCompany.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    private Color GetStatusColor(string status) => status switch
    {
        "Draft" => Color.Default,
        "Sent" => Color.Info,
        "Under Review" => Color.Warning,
        "Accepted" => Color.Success,
        "Rejected" => Color.Error,
        "Expired" => Color.Secondary,
        _ => Color.Default
    };
    
    private Color GetActivityColor(string type) => type switch
    {
        "created" => Color.Success,
        "sent" => Color.Info,
        "accepted" => Color.Primary,
        "rejected" => Color.Error,
        "expired" => Color.Secondary,
        "updated" => Color.Warning,
        _ => Color.Default
    };
    
    private void CreateNewQuote()
    {
        Navigation.NavigateTo("/portal/supplier/quotes/create");
    }
    
    private void ViewQuote(QuoteItem quote)
    {
        selectedQuote = quote;
        showQuoteDialog = true;
    }
    
    private void EditQuote(QuoteItem quote)
    {
        Navigation.NavigateTo($"/portal/supplier/quotes/edit/{quote.Id}");
    }
    
    private async Task SendQuote(QuoteItem quote)
    {
        // Simulate sending quote
        await Task.Delay(1000);
        quote.Status = "Sent";
        showQuoteDialog = false;
        Snackbar.Add($"Quote {quote.QuoteNumber} sent successfully!");
    }
    
    private async Task WithdrawQuote(QuoteItem quote)
    {
        // Simulate withdrawing quote
        await Task.Delay(500);
        quote.Status = "Withdrawn";
        Snackbar.Add($"Quote {quote.QuoteNumber} withdrawn");
    }
    
    private void DuplicateQuote(QuoteItem quote)
    {
        Navigation.NavigateTo($"/portal/supplier/quotes/duplicate/{quote.Id}");
    }
    
    private async Task DownloadPDF(QuoteItem quote)
    {
        // Simulate PDF generation
        Snackbar.Add($"Generating PDF for {quote.QuoteNumber}...");
        await Task.Delay(2000);
        Snackbar.Add("PDF downloaded successfully!");
    }
    
    private async Task ExportQuotes()
    {
        // Simulate export
        Snackbar.Add("Exporting quotes to Excel...");
        await Task.Delay(2000);
        Snackbar.Add("Export completed successfully!");
    }
    
    private class QuoteItem
    {
        public int Id { get; set; }
        public string QuoteNumber { get; set; } = "";
        public string RFQNumber { get; set; } = "";
        public string BuyerCompany { get; set; } = "";
        public string ContactPerson { get; set; } = "";
        public string ProductName { get; set; } = "";
        public int Quantity { get; set; }
        public string Unit { get; set; } = "";
        public decimal UnitPrice { get; set; }
        public decimal TotalAmount { get; set; }
        public DateTime QuoteDate { get; set; }
        public DateTime ExpiryDate { get; set; }
        public string Status { get; set; } = "";
        public string Notes { get; set; } = "";
    }
    
    private class ActivityItem
    {
        public string Type { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }
}