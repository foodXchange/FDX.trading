@page "/portal/supplier/products"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "SuperAdmin,Admin,Supplier")]
@rendermode InteractiveServer

<PageTitle>Products - FoodX Supplier Portal</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Class="mr-2" />
                Product Management
            </MudText>
        </MudItem>

        <!-- Quick Stats -->
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Total Products</MudText>
                    <MudText Typo="Typo.h4">156</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Active</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Success">142</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Low Stock</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Warning">23</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Categories</MudText>
                    <MudText Typo="Typo.h4">18</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Actions and Search -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="2">
                <div class="d-flex justify-space-between align-center mb-4">
                    <div class="d-flex align-center">
                        <MudTextField @bind-Value="searchString" 
                                    Placeholder="Search products..." 
                                    Adornment="Adornment.Start" 
                                    AdornmentIcon="@Icons.Material.Filled.Search" 
                                    IconSize="Size.Medium" 
                                    Class="mr-4" />
                        <MudSelect @bind-Value="selectedCategory" Placeholder="All Categories" Class="mr-2">
                            <MudSelectItem Value="@("All")">All Categories</MudSelectItem>
                            <MudSelectItem Value="@("Dairy")">Dairy</MudSelectItem>
                            <MudSelectItem Value="@("Meat")">Meat & Poultry</MudSelectItem>
                            <MudSelectItem Value="@("Vegetables")">Fresh Vegetables</MudSelectItem>
                            <MudSelectItem Value="@("Beverages")">Beverages</MudSelectItem>
                        </MudSelect>
                    </div>
                    <div>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" 
                                   StartIcon="@Icons.Material.Filled.FileUpload" 
                                   Href="/portal/supplier/products/import" Class="mr-2">
                            Import Products
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Href="/portal/supplier/products/add">
                            Add Product
                        </MudButton>
                    </div>
                </div>
                
                <MudTable Items="@filteredProducts" Hover="true" Dense="true" Filter="new Func<ProductItem,bool>(FilterFunc)">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<ProductItem, object>(x=>x.Name)">Product</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ProductItem, object>(x=>x.Category)">Category</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ProductItem, object>(x=>x.Price)">Price/Unit</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ProductItem, object>(x=>x.Stock)">Stock</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ProductItem, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
                        <MudTh>Last Updated</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <div class="d-flex align-center">
                                <MudAvatar Size="Size.Medium" Class="mr-3">
                                    <MudIcon Icon="@Icons.Material.Filled.Inventory2" />
                                </MudAvatar>
                                <div>
                                    <MudText Typo="Typo.body1">@context.Name</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">SKU: @context.Sku</MudText>
                                </div>
                            </div>
                        </MudTd>
                        <MudTd>@context.Category</MudTd>
                        <MudTd>â‚¬@context.Price.ToString("N2")/@context.Unit</MudTd>
                        <MudTd>
                            <MudText Color="@(context.Stock < 50 ? Color.Warning : Color.Default)">
                                @context.Stock @context.Unit
                            </MudText>
                        </MudTd>
                        <MudTd>
                            <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(context.Status)">
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd>@context.LastUpdated.ToString("MMM dd")</MudTd>
                        <MudTd>
                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary">
                                Edit
                            </MudButton>
                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Secondary">
                                View
                            </MudButton>
                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Error">
                                Archive
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string searchString = "";
    private string selectedCategory = "All";
    private List<ProductItem> _products = new();
    
    private IEnumerable<ProductItem> filteredProducts => 
        selectedCategory == "All" ? _products : _products.Where(p => p.Category == selectedCategory);
    
    protected override void OnInitialized()
    {
        // Mock data
        _products = new List<ProductItem>
        {
            new ProductItem { Id = 1, Name = "Organic Whole Milk", Sku = "MILK-ORG-001", Category = "Dairy", Price = 3.50m, Unit = "Liter", Stock = 250, Status = "Active", LastUpdated = DateTime.Now.AddDays(-1) },
            new ProductItem { Id = 2, Name = "Free-Range Chicken Breast", Sku = "CHKN-FR-002", Category = "Meat", Price = 12.80m, Unit = "Kg", Stock = 45, Status = "Active", LastUpdated = DateTime.Now.AddDays(-2) },
            new ProductItem { Id = 3, Name = "Fresh Tomatoes", Sku = "VEG-TOM-003", Category = "Vegetables", Price = 4.20m, Unit = "Kg", Stock = 180, Status = "Active", LastUpdated = DateTime.Now.AddHours(-3) },
            new ProductItem { Id = 4, Name = "Aged Cheddar Cheese", Sku = "CHE-CED-004", Category = "Dairy", Price = 18.90m, Unit = "Kg", Stock = 25, Status = "Low Stock", LastUpdated = DateTime.Now.AddDays(-1) },
            new ProductItem { Id = 5, Name = "Premium Olive Oil", Sku = "OIL-OLV-005", Category = "Beverages", Price = 25.50m, Unit = "Liter", Stock = 120, Status = "Active", LastUpdated = DateTime.Now.AddDays(-3) },
            new ProductItem { Id = 6, Name = "Organic Carrots", Sku = "VEG-CAR-006", Category = "Vegetables", Price = 2.80m, Unit = "Kg", Stock = 15, Status = "Low Stock", LastUpdated = DateTime.Now.AddDays(-2) },
            new ProductItem { Id = 7, Name = "Grass-Fed Beef", Sku = "BEEF-GF-007", Category = "Meat", Price = 32.50m, Unit = "Kg", Stock = 80, Status = "Active", LastUpdated = DateTime.Now.AddDays(-1) },
            new ProductItem { Id = 8, Name = "Fresh Basil", Sku = "HRB-BAS-008", Category = "Vegetables", Price = 8.90m, Unit = "Kg", Stock = 5, Status = "Out of Stock", LastUpdated = DateTime.Now.AddDays(-4) },
        };
    }
    
    private bool FilterFunc(ProductItem element) => FilterFunc(element, searchString);

    private bool FilterFunc(ProductItem element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Sku.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    private Color GetStatusColor(string status) => status switch
    {
        "Active" => Color.Success,
        "Low Stock" => Color.Warning,
        "Out of Stock" => Color.Error,
        "Archived" => Color.Default,
        _ => Color.Default
    };
    
    private class ProductItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Sku { get; set; } = "";
        public string Category { get; set; } = "";
        public decimal Price { get; set; }
        public string Unit { get; set; } = "";
        public int Stock { get; set; }
        public string Status { get; set; } = "";
        public DateTime LastUpdated { get; set; }
    }
}