@page "/portal/supplier/products/import"
@using Microsoft.AspNetCore.Authorization
@using FoodX.Admin.Services
@using FoodX.Admin.Models
@attribute [Authorize(Roles = "SuperAdmin,Admin,Supplier")]
@inject ISnackbar Snackbar
@inject ICsvImportService CsvImportService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Import Products - FoodX Supplier Portal</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4"></MudBreadcrumbs>
            
            <MudText Typo="Typo.h4" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.FileUpload" Class="mr-2" />
                Import Products
            </MudText>
        </MudItem>

        <!-- Upload Section -->
        <MudItem xs="12" lg="8">
            <MudPaper Class="pa-6" Elevation="2">
                <MudText Typo="Typo.h6" Class="mb-4">Upload Product File</MudText>
                
                <MudFileUpload T="IBrowserFile" Accept=".csv,.xlsx" FilesChanged="OnInputFileChanged" MaximumFileCount="1">
                    <ActivatorContent>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Select File
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                
                @if (_selectedFile != null)
                {
                    <MudChip T="string" Color="Color.Primary" Class="mt-2">
                        @_selectedFile.Name (@(_selectedFile.Size / 1024)KB)
                    </MudChip>
                }
                
                <MudText Typo="Typo.caption" Class="mt-2">
                    Accepted formats: CSV, Excel (.xlsx). Maximum file size: 10MB
                </MudText>
                
                @if (_selectedFile != null && !_isUploading)
                {
                    <div class="mt-4">
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Success" 
                                   StartIcon="@Icons.Material.Filled.Upload"
                                   OnClick="ProcessImport">
                            Process Import
                        </MudButton>
                    </div>
                }
                
                @if (_isUploading)
                {
                    <div class="mt-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                        <MudText Align="Align.Center">Processing your file...</MudText>
                    </div>
                }
            </MudPaper>
        </MudItem>

        <!-- Template & Instructions -->
        <MudItem xs="12" lg="4">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h6" GutterBottom="true">
                    <MudIcon Icon="@Icons.Material.Filled.Download" Class="mr-2" />
                    Download Template
                </MudText>
                <MudText Typo="Typo.body2" Class="mb-3">
                    Use our template to ensure your data imports correctly.
                </MudText>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           FullWidth="true"
                           StartIcon="@Icons.Material.Filled.Download"
                           OnClick="DownloadTemplate">
                    Download CSV Template
                </MudButton>
                
                <MudDivider Class="my-4" />
                
                <MudText Typo="Typo.h6" GutterBottom="true">
                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                    Required Fields
                </MudText>
                <MudList T="string" Dense="true">
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        <MudText Typo="Typo.body2">Product Name</MudText>
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        <MudText Typo="Typo.body2">SKU</MudText>
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        <MudText Typo="Typo.body2">Category</MudText>
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        <MudText Typo="Typo.body2">Price</MudText>
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        <MudText Typo="Typo.body2">Unit</MudText>
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        <MudText Typo="Typo.body2">Stock Quantity</MudText>
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Import Results -->
        @if (_importSummary != null)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4" Elevation="2">
                    <MudText Typo="Typo.h6" Class="mb-4">Import Results - @_importSummary.ImportType</MudText>
                    
                    <MudGrid>
                        <MudItem xs="12" sm="3">
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.caption">Total Records</MudText>
                                    <MudText Typo="Typo.h4">@_importSummary.TotalRecords</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                        <MudItem xs="12" sm="3">
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.caption">Successful</MudText>
                                    <MudText Typo="Typo.h4" Color="Color.Success">@_importSummary.SuccessfulRecords</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                        <MudItem xs="12" sm="3">
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.caption">Failed</MudText>
                                    <MudText Typo="Typo.h4" Color="Color.Error">@_importSummary.FailedRecords</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                        <MudItem xs="12" sm="3">
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.caption">Warnings</MudText>
                                    <MudText Typo="Typo.h4" Color="Color.Warning">@_importSummary.WarningRecords</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>

                    <MudText Typo="Typo.body2" Class="mt-4 mb-2">
                        Processing Time: @_importSummary.ProcessingTime.TotalSeconds.ToString("F2") seconds
                    </MudText>
                    
                    @if (_importSummary.Results.Any())
                    {
                        <MudTable Items="@_importSummary.Results" Hover="true" Dense="true" Class="mt-4" Height="400px" FixedHeader="true">
                            <HeaderContent>
                                <MudTh>Row</MudTh>
                                <MudTh>Status</MudTh>
                                <MudTh>Message</MudTh>
                                <MudTh>Errors</MudTh>
                                <MudTh>Warnings</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.RowNumber</MudTd>
                                <MudTd>
                                    <MudChip T="string" Size="Size.Small" Color="@(context.IsSuccess ? Color.Success : Color.Error)">
                                        @(context.IsSuccess ? "Success" : "Failed")
                                    </MudChip>
                                </MudTd>
                                <MudTd>
                                    <MudText Typo="Typo.body2" Color="@(context.IsSuccess ? Color.Success : Color.Error)">
                                        @context.Message
                                    </MudText>
                                </MudTd>
                                <MudTd>
                                    @if (context.Errors.Any())
                                    {
                                        <MudList T="string" Dense="true">
                                            @foreach (var error in context.Errors)
                                            {
                                                <MudListItem T="string">
                                                    <MudText Typo="Typo.caption" Color="Color.Error">@error</MudText>
                                                </MudListItem>
                                            }
                                        </MudList>
                                    }
                                </MudTd>
                                <MudTd>
                                    @if (context.Warnings.Any())
                                    {
                                        <MudList T="string" Dense="true">
                                            @foreach (var warning in context.Warnings)
                                            {
                                                <MudListItem T="string">
                                                    <MudText Typo="Typo.caption" Color="Color.Warning">@warning</MudText>
                                                </MudListItem>
                                            }
                                        </MudList>
                                    }
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    
                    <div class="mt-4">
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Check"
                                   OnClick="ConfirmImport"
                                   Disabled="@(_importSummary.SuccessfulRecords == 0)">
                            Confirm Import (@_importSummary.SuccessfulRecords products)
                        </MudButton>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Secondary" 
                                   Class="ml-2"
                                   OnClick="ClearResults">
                            Clear Results
                        </MudButton>
                    </div>
                </MudPaper>
            </MudItem>
        }

        <!-- Import History -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h6" Class="mb-4">Recent Imports</MudText>
                
                <MudTable Items="@_importHistory" Hover="true" Dense="true">
                    <HeaderContent>
                        <MudTh>Import Date</MudTh>
                        <MudTh>Filename</MudTh>
                        <MudTh>Total Records</MudTh>
                        <MudTh>Successful</MudTh>
                        <MudTh>Failed</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.ImportDate.ToString("MMM dd, yyyy HH:mm")</MudTd>
                        <MudTd>@context.Filename</MudTd>
                        <MudTd>@context.TotalRecords</MudTd>
                        <MudTd>
                            <MudText Color="Color.Success">@context.SuccessfulRecords</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Color="Color.Error">@context.FailedRecords</MudText>
                        </MudTd>
                        <MudTd>
                            <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(context.Status)">
                                @context.Status
                            </MudChip>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IBrowserFile? _selectedFile;
    private bool _isUploading = false;
    private ImportSummary? _importSummary;
    private List<ImportHistoryItem> _importHistory = new();
    private string _currentUserId = "";
    
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Supplier Portal", href: "/portal/supplier"),
        new BreadcrumbItem("Products", href: "/portal/supplier/products"),
        new BreadcrumbItem("Import Products", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadImportHistory();
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUserId = authState.User?.Identity?.Name ?? "Anonymous";
    }

    private void OnInputFileChanged(IBrowserFile file)
    {
        _selectedFile = file;
        ClearResults();
    }

    private async Task ProcessImport()
    {
        if (_selectedFile == null) return;

        _isUploading = true;
        _importSummary = null;

        try
        {
            using var stream = _selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            
            var settings = new ImportValidationSettings
            {
                AllowDuplicates = false,
                ValidateReferences = true,
                PreviewMode = true, // First run as preview
                MaxRecords = 1000
            };
            
            _importSummary = await CsvImportService.ImportProductsAsync(stream, _selectedFile.Name, _currentUserId, null, settings);
            
            var successCount = _importSummary.SuccessfulRecords;
            var failCount = _importSummary.FailedRecords;
            var warnCount = _importSummary.WarningRecords;
            
            Snackbar.Add($"Import preview completed: {successCount} successful, {failCount} failed, {warnCount} warnings", 
                failCount > 0 ? Severity.Warning : Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Import failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUploading = false;
        }
    }

    private async Task ConfirmImport()
    {
        if (_selectedFile == null || _importSummary == null) return;

        _isUploading = true;

        try
        {
            using var stream = _selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            
            var settings = new ImportValidationSettings
            {
                AllowDuplicates = false,
                ValidateReferences = true,
                PreviewMode = false, // Actual import
                MaxRecords = 1000
            };
            
            var finalSummary = await CsvImportService.ImportProductsAsync(stream, _selectedFile.Name, _currentUserId, null, settings);
            
            // Add to history
            _importHistory.Insert(0, new ImportHistoryItem
            {
                Id = _importHistory.Count + 1,
                ImportDate = finalSummary.ImportDate,
                Filename = finalSummary.Filename,
                ImportType = finalSummary.ImportType,
                TotalRecords = finalSummary.TotalRecords,
                SuccessfulRecords = finalSummary.SuccessfulRecords,
                FailedRecords = finalSummary.FailedRecords,
                WarningRecords = finalSummary.WarningRecords,
                Status = finalSummary.FailedRecords > 0 ? "Completed with Errors" : "Completed",
                ImportedBy = _currentUserId,
                ProcessingTime = finalSummary.ProcessingTime
            });
            
            Snackbar.Add($"Successfully imported {finalSummary.SuccessfulRecords} products!", Severity.Success);
            ClearResults();
            _selectedFile = null;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Import confirmation failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUploading = false;
        }
    }

    private void ClearResults()
    {
        _importSummary = null;
    }

    private async Task DownloadTemplate()
    {
        try
        {
            var templateBytes = await CsvImportService.GenerateTemplateAsync("Products");
            
            // Download the template
            var fileName = "product_import_template.csv";
            var base64 = Convert.ToBase64String(templateBytes);
            var dataUrl = $"data:text/csv;base64,{base64}";
            
            await JSRuntime.InvokeVoidAsync("downloadFileFromUrl", dataUrl, fileName);
            Snackbar.Add("Template download started", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Template download failed: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadImportHistory()
    {
        // For now, use mock data. In real implementation, load from database
        _importHistory = new List<ImportHistoryItem>
        {
            new ImportHistoryItem { 
                Id = 1, 
                ImportDate = DateTime.Now.AddDays(-2), 
                Filename = "products_batch_1.csv", 
                ImportType = "Products",
                TotalRecords = 45, 
                SuccessfulRecords = 43, 
                FailedRecords = 2, 
                WarningRecords = 0,
                Status = "Completed with Errors",
                ImportedBy = _currentUserId,
                ProcessingTime = TimeSpan.FromSeconds(12)
            },
            new ImportHistoryItem { 
                Id = 2,
                ImportDate = DateTime.Now.AddDays(-7), 
                Filename = "seasonal_products.csv", 
                ImportType = "Products",
                TotalRecords = 28, 
                SuccessfulRecords = 28, 
                FailedRecords = 0,
                WarningRecords = 3,
                Status = "Completed",
                ImportedBy = _currentUserId,
                ProcessingTime = TimeSpan.FromSeconds(8)
            }
        };
    }

    private Color GetStatusColor(string status) => status switch
    {
        "Completed" => Color.Success,
        "Completed with Errors" => Color.Warning,
        "Processing" => Color.Info,
        "Failed" => Color.Error,
        _ => Color.Default
    };
}