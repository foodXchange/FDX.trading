@page "/portal/supplier/rfqs"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "SuperAdmin,Admin,Supplier")]
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>RFQ Requests - FoodX Supplier Portal</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.RequestQuote" Class="mr-2" />
                Request for Quote (RFQ) Management
            </MudText>
        </MudItem>

        <!-- Quick Stats -->
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Total RFQs</MudText>
                    <MudText Typo="Typo.h4">18</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Pending Response</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Warning">8</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Quotes Sent</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Info">7</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.caption">Won RFQs</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Success">3</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Filters and Search -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="2">
                <div class="d-flex justify-space-between align-center mb-4">
                    <div class="d-flex align-center">
                        <MudTextField @bind-Value="searchString" 
                                    Placeholder="Search RFQs..." 
                                    Adornment="Adornment.Start" 
                                    AdornmentIcon="@Icons.Material.Filled.Search" 
                                    IconSize="Size.Medium" 
                                    Class="mr-4" />
                        <MudSelect @bind-Value="selectedStatus" Placeholder="All Status" Class="mr-2">
                            <MudSelectItem Value="@("All")">All Status</MudSelectItem>
                            <MudSelectItem Value="@("Open")">Open</MudSelectItem>
                            <MudSelectItem Value="@("Quoted")">Quoted</MudSelectItem>
                            <MudSelectItem Value="@("Won")">Won</MudSelectItem>
                            <MudSelectItem Value="@("Lost")">Lost</MudSelectItem>
                            <MudSelectItem Value="@("Expired")">Expired</MudSelectItem>
                        </MudSelect>
                        <MudSelect @bind-Value="selectedCategory" Placeholder="All Categories" Class="mr-2">
                            <MudSelectItem Value="@("All")">All Categories</MudSelectItem>
                            <MudSelectItem Value="@("Dairy")">Dairy</MudSelectItem>
                            <MudSelectItem Value="@("Meat")">Meat & Poultry</MudSelectItem>
                            <MudSelectItem Value="@("Vegetables")">Fresh Vegetables</MudSelectItem>
                            <MudSelectItem Value="@("Beverages")">Beverages</MudSelectItem>
                        </MudSelect>
                    </div>
                    <MudButton Variant="Variant.Text" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Refresh"
                               OnClick="RefreshRFQs">
                        Refresh
                    </MudButton>
                </div>
                
                <MudTable Items="@filteredRFQs" Hover="true" Dense="true" Filter="new Func<RFQItem,bool>(FilterFunc)" Striped="true" Bordered="false" Elevation="0">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<RFQItem, object>(x=>x.RFQNumber)">RFQ #</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RFQItem, object>(x=>x.BuyerCompany)">Buyer</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RFQItem, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RFQItem, object>(x=>x.Category)">Category</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RFQItem, object>(x=>x.Quantity)">Quantity</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RFQItem, object>(x=>x.DeadlineDate)">Deadline</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RFQItem, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
                        <MudTh>Priority</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="RFQ #">
                            <MudLink Typo="Typo.body2" Color="Color.Primary" OnClick="() => ViewDetails(context)" Style="cursor: pointer; font-weight: 500;">@context.RFQNumber</MudLink>
                        </MudTd>
                        <MudTd DataLabel="Buyer">
                            <div>
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">@context.BuyerCompany</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@context.ContactPerson</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Title">
                            <MudTooltip Text="@context.Description" Arrow="true" Placement="Placement.Top">
                                <MudText Typo="Typo.body2" Style="@($"max-width: 250px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;")">@context.Title</MudText>
                            </MudTooltip>
                        </MudTd>
                        <MudTd DataLabel="Category">
                            <MudChip T="string" Size="Size.Small" Color="Color.Default" Variant="Variant.Text">
                                <MudIcon Icon="@GetCategoryIcon(context.Category)" Size="Size.Small" Class="mr-1" />
                                @context.Category
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Quantity">
                            <MudText Typo="Typo.body2" Style="font-weight: 500;">@context.Quantity.ToString("N0")</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Unit</MudText>
                        </MudTd>
                        <MudTd DataLabel="Deadline">
                            <div class="d-flex align-center gap-1">
                                <MudText Color="@(context.DeadlineDate < DateTime.Now.AddDays(2) ? Color.Error : Color.Default)" Typo="Typo.body2">
                                    @context.DeadlineDate.ToString("MMM dd")
                                </MudText>
                                @if (context.DeadlineDate < DateTime.Now.AddDays(2))
                                {
                                    <MudTooltip Text="Deadline approaching!">
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Color="Color.Warning" />
                                    </MudTooltip>
                                }
                            </div>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@GetTimeRemaining(context.DeadlineDate)</MudText>
                        </MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(context.Status)" Variant="Variant.Filled">
                                <MudIcon Icon="@GetStatusIcon(context.Status)" Size="Size.Small" Class="mr-1" />
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Priority">
                            <MudChip T="string" Size="Size.Small" Color="@GetPriorityColor(context.Priority)" Variant="Variant.Outlined">
                                @context.Priority
                            </MudChip>
                        </MudTd>
                        <MudTd>
                            <div class="d-flex gap-1">
                                @if (context.Status == "Open")
                                {
                                    <MudTooltip Text="Create Quote">
                                        <MudIconButton Size="Size.Small" 
                                                     Icon="@Icons.Material.Filled.RequestQuote" 
                                                     Color="Color.Primary"
                                                     Variant="Variant.Filled"
                                                     OnClick="() => CreateQuote(context)" />
                                    </MudTooltip>
                                }
                                <MudTooltip Text="View Details">
                                    <MudIconButton Size="Size.Small" 
                                                 Icon="@Icons.Material.Filled.Visibility" 
                                                 Color="Color.Info"
                                                 OnClick="() => ViewDetails(context)" />
                                </MudTooltip>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                                    <MudMenuItem Icon="@Icons.Material.Filled.Info" OnClick="() => ViewDetails(context)">
                                        View Details
                                    </MudMenuItem>
                                    @if (context.Status == "Open")
                                    {
                                        <MudMenuItem Icon="@Icons.Material.Filled.RequestQuote" OnClick="() => CreateQuote(context)">
                                            Create Quote
                                        </MudMenuItem>
                                    }
                                    @if (context.Status == "Quoted")
                                    {
                                        <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="() => EditQuote(context)">
                                            Edit Quote
                                        </MudMenuItem>
                                    }
                                    <MudMenuItem Icon="@Icons.Material.Filled.ContentCopy" OnClick="() => DuplicateRFQ(context)">
                                        Duplicate RFQ
                                    </MudMenuItem>
                                    <MudMenuItem Icon="@Icons.Material.Filled.Download" OnClick="() => DownloadRFQ(context)">
                                        Download PDF
                                    </MudMenuItem>
                                    @if (context.Status == "Open")
                                    {
                                        <MudMenuItem Icon="@Icons.Material.Filled.NotInterested" OnClick="() => DeclineRFQ(context)">
                                            Decline RFQ
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                            </div>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- RFQ Details Dialog -->
<MudDialog @bind-Visible="showDetailsDialog" Options="new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true }">
    <DialogContent>
        @if (selectedRFQ != null)
        {
            <MudText Typo="Typo.h5" Class="mb-4">RFQ Details - @selectedRFQ.RFQNumber</MudText>
            
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudText Typo="Typo.h6" Class="mb-2">Buyer Information</MudText>
                        <MudText><strong>Company:</strong> @selectedRFQ.BuyerCompany</MudText>
                        <MudText><strong>Contact:</strong> @selectedRFQ.ContactPerson</MudText>
                        <MudText><strong>Email:</strong> @selectedRFQ.Email</MudText>
                        <MudText><strong>Phone:</strong> @selectedRFQ.Phone</MudText>
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudText Typo="Typo.h6" Class="mb-2">RFQ Details</MudText>
                        <MudText><strong>Title:</strong> @selectedRFQ.Title</MudText>
                        <MudText><strong>Category:</strong> @selectedRFQ.Category</MudText>
                        <MudText><strong>Quantity:</strong> @selectedRFQ.Quantity @selectedRFQ.Unit</MudText>
                        <MudText><strong>Deadline:</strong> @selectedRFQ.DeadlineDate.ToString("MMM dd, yyyy")</MudText>
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudText Typo="Typo.h6" Class="mb-2">Requirements & Specifications</MudText>
                        <MudText>@selectedRFQ.Description</MudText>
                        
                        @if (selectedRFQ.Requirements.Any())
                        {
                            <MudText Typo="Typo.subtitle1" Class="mt-3 mb-2">Specific Requirements:</MudText>
                            <MudList T="string">
                                @foreach (var requirement in selectedRFQ.Requirements)
                                {
                                    <MudListItem T="string" Text="@requirement" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Primary" />
                                }
                            </MudList>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => showDetailsDialog = false">Close</MudButton>
        @if (selectedRFQ?.Status == "Open")
        {
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => CreateQuote(selectedRFQ)">
                Create Quote
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    private string searchString = "";
    private string selectedStatus = "All";
    private string selectedCategory = "All";
    private List<RFQItem> _rfqs = new();
    private bool showDetailsDialog = false;
    private RFQItem? selectedRFQ = null;
    
    private IEnumerable<RFQItem> filteredRFQs
    {
        get
        {
            var filtered = _rfqs.AsEnumerable();
            
            if (selectedStatus != "All")
                filtered = filtered.Where(r => r.Status == selectedStatus);
                
            if (selectedCategory != "All")
                filtered = filtered.Where(r => r.Category == selectedCategory);
                
            return filtered;
        }
    }
    
    protected override void OnInitialized()
    {
        LoadRFQs();
    }
    
    private void LoadRFQs()
    {
        // Mock RFQ data
        _rfqs = new List<RFQItem>
        {
            new RFQItem 
            { 
                Id = 1, RFQNumber = "RFQ-2024-001", BuyerCompany = "Metro Restaurant Group", ContactPerson = "John Smith", 
                Email = "j.smith@metro.com", Phone = "+32 2 123 4567", Title = "Organic Dairy Products Supply", 
                Category = "Dairy", Quantity = 500, Unit = "Kg", DeadlineDate = DateTime.Now.AddDays(5), 
                Status = "Open", Priority = "High", Description = "Looking for high-quality organic dairy products for our restaurant chain. Must meet EU organic standards.",
                Requirements = new List<string> { "EU Organic Certification", "Weekly Delivery", "Minimum 6 months shelf life" }
            },
            new RFQItem 
            { 
                Id = 2, RFQNumber = "RFQ-2024-002", BuyerCompany = "Fresh Market Belgium", ContactPerson = "Marie Dubois", 
                Email = "m.dubois@freshmarket.be", Phone = "+32 2 234 5678", Title = "Seasonal Vegetables", 
                Category = "Vegetables", Quantity = 200, Unit = "Kg", DeadlineDate = DateTime.Now.AddDays(2), 
                Status = "Quoted", Priority = "Medium", Description = "Seasonal vegetables for retail chain. Need competitive pricing and consistent quality.",
                Requirements = new List<string> { "Local sourcing preferred", "Bi-weekly delivery", "Quality grade A" }
            },
            new RFQItem 
            { 
                Id = 3, RFQNumber = "RFQ-2024-003", BuyerCompany = "Hotel Brussels Premium", ContactPerson = "Pierre Laurent", 
                Email = "p.laurent@hotelbru.com", Phone = "+32 2 345 6789", Title = "Premium Meat Selection", 
                Category = "Meat", Quantity = 100, Unit = "Kg", DeadlineDate = DateTime.Now.AddDays(7), 
                Status = "Open", Priority = "High", Description = "Premium cuts for luxury hotel restaurant. Quality is paramount over price.",
                Requirements = new List<string> { "Premium grade only", "Daily delivery available", "Halal certification preferred" }
            },
            new RFQItem 
            { 
                Id = 4, RFQNumber = "RFQ-2024-004", BuyerCompany = "Café Chain Plus", ContactPerson = "Anna Van Der Berg", 
                Email = "a.vandenberg@cafeplus.be", Phone = "+32 2 456 7890", Title = "Coffee & Beverages Supply", 
                Category = "Beverages", Quantity = 1000, Unit = "Units", DeadlineDate = DateTime.Now.AddDays(10), 
                Status = "Won", Priority = "Medium", Description = "Monthly supply of coffee beans and related beverages for café chain.",
                Requirements = new List<string> { "Fair trade certification", "Monthly delivery", "Bulk packaging" }
            },
            new RFQItem 
            { 
                Id = 5, RFQNumber = "RFQ-2024-005", BuyerCompany = "School Catering Services", ContactPerson = "Tom Wilson", 
                Email = "t.wilson@schoolcater.com", Phone = "+32 2 567 8901", Title = "Dairy Products for Schools", 
                Category = "Dairy", Quantity = 800, Unit = "Liters", DeadlineDate = DateTime.Now.AddDays(1), 
                Status = "Expired", Priority = "Low", Description = "Milk and dairy products for school meal programs. Budget-conscious procurement.",
                Requirements = new List<string> { "Budget-friendly pricing", "Long shelf life", "Child-friendly packaging" }
            },
        };
    }
    
    private bool FilterFunc(RFQItem element) => FilterFunc(element, searchString);

    private bool FilterFunc(RFQItem element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.RFQNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.BuyerCompany.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    private Color GetStatusColor(string status) => status switch
    {
        "Open" => Color.Success,
        "Quoted" => Color.Info,
        "Won" => Color.Primary,
        "Lost" => Color.Error,
        "Expired" => Color.Default,
        _ => Color.Default
    };
    
    private Color GetPriorityColor(string priority) => priority switch
    {
        "High" => Color.Error,
        "Medium" => Color.Warning,
        "Low" => Color.Info,
        _ => Color.Default
    };
    
    private void RefreshRFQs()
    {
        LoadRFQs();
        Snackbar.Add("RFQ list refreshed");
    }
    
    private void ViewDetails(RFQItem rfq)
    {
        selectedRFQ = rfq;
        showDetailsDialog = true;
    }
    
    private void CreateQuote(RFQItem rfq)
    {
        // Navigate to quote creation page
        Navigation.NavigateTo($"/portal/supplier/quotes/create?rfqId={rfq.Id}");
    }
    
    private void EditQuote(RFQItem rfq)
    {
        Navigation.NavigateTo($"/portal/supplier/quotes/edit/{rfq.Id}");
    }
    
    private void DuplicateRFQ(RFQItem rfq)
    {
        var duplicatedRfq = new RFQItem
        {
            Id = _rfqs.Max(r => r.Id) + 1,
            RFQNumber = $"RFQ-2024-{(_rfqs.Count + 1):D3}",
            BuyerCompany = rfq.BuyerCompany,
            ContactPerson = rfq.ContactPerson,
            Email = rfq.Email,
            Phone = rfq.Phone,
            Title = $"{rfq.Title} (Copy)",
            Category = rfq.Category,
            Quantity = rfq.Quantity,
            Unit = rfq.Unit,
            DeadlineDate = DateTime.Now.AddDays(7),
            Status = "Open",
            Priority = rfq.Priority,
            Description = rfq.Description,
            Requirements = new List<string>(rfq.Requirements)
        };
        _rfqs.Add(duplicatedRfq);
        Snackbar.Add($"RFQ duplicated successfully: {duplicatedRfq.RFQNumber}", Severity.Success);
        StateHasChanged();
    }
    
    private void DownloadRFQ(RFQItem rfq)
    {
        Snackbar.Add($"Downloading PDF for {rfq.RFQNumber}...", Severity.Info);
        // In a real application, this would generate and download a PDF
    }
    
    private void DeclineRFQ(RFQItem rfq)
    {
        rfq.Status = "Declined";
        Snackbar.Add($"RFQ {rfq.RFQNumber} has been declined", Severity.Warning);
        StateHasChanged();
    }
    
    private string GetCategoryIcon(string category) => category switch
    {
        "Dairy" => Icons.Material.Filled.LocalDrink,
        "Meat" => Icons.Material.Filled.Restaurant,
        "Vegetables" => Icons.Material.Filled.Grass,
        "Beverages" => Icons.Material.Filled.LocalBar,
        _ => Icons.Material.Filled.Category
    };
    
    private string GetStatusIcon(string status) => status switch
    {
        "Open" => Icons.Material.Filled.Schedule,
        "Quoted" => Icons.Material.Filled.Send,
        "Won" => Icons.Material.Filled.CheckCircle,
        "Lost" => Icons.Material.Filled.Cancel,
        "Expired" => Icons.Material.Filled.EventBusy,
        "Declined" => Icons.Material.Filled.NotInterested,
        _ => Icons.Material.Filled.HelpOutline
    };
    
    private string GetTimeRemaining(DateTime deadline)
    {
        var timeSpan = deadline - DateTime.Now;
        if (timeSpan.TotalDays > 7)
            return $"{(int)timeSpan.TotalDays} days";
        else if (timeSpan.TotalDays > 1)
            return $"{(int)timeSpan.TotalDays} days left";
        else if (timeSpan.TotalHours > 1)
            return $"{(int)timeSpan.TotalHours} hours left";
        else if (timeSpan.TotalMinutes > 0)
            return $"{(int)timeSpan.TotalMinutes} minutes left";
        else
            return "Expired";
    }
    
    private class RFQItem
    {
        public int Id { get; set; }
        public string RFQNumber { get; set; } = "";
        public string BuyerCompany { get; set; } = "";
        public string ContactPerson { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Title { get; set; } = "";
        public string Category { get; set; } = "";
        public int Quantity { get; set; }
        public string Unit { get; set; } = "";
        public DateTime DeadlineDate { get; set; }
        public string Status { get; set; } = "";
        public string Priority { get; set; } = "";
        public string Description { get; set; } = "";
        public List<string> Requirements { get; set; } = new();
    }
}