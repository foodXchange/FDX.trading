@page "/portal/buyer/order/{OrderId}"
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "SuperAdmin,Admin,Buyer")]
@rendermode InteractiveServer

<PageTitle>Order Details - FoodX Buyer Portal</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudBreadcrumbs Items="_breadcrumbs" />
        </MudItem>
        
        <MudItem xs="12">
            <MudText Typo="Typo.h4" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.Receipt" Class="mr-2" />
                Order Details: @OrderId
            </MudText>
        </MudItem>

        <!-- Order Information -->
        <MudItem xs="12" md="8">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true">Order Information</MudText>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption">Order Number</MudText>
                            <MudText>@_order?.OrderNumber</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption">Status</MudText>
                            <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(_order?.Status ?? "")">
                                @_order?.Status
                            </MudChip>
                        </MudItem>
                        <MudItem xs="6" Class="mt-3">
                            <MudText Typo="Typo.caption">Supplier</MudText>
                            <MudText>@_order?.Supplier</MudText>
                        </MudItem>
                        <MudItem xs="6" Class="mt-3">
                            <MudText Typo="Typo.caption">Total Amount</MudText>
                            <MudText Typo="Typo.h6">€@_order?.Total.ToString("N2")</MudText>
                        </MudItem>
                        <MudItem xs="6" Class="mt-3">
                            <MudText Typo="Typo.caption">Order Date</MudText>
                            <MudText>@_order?.OrderDate.ToString("MMMM dd, yyyy")</MudText>
                        </MudItem>
                        <MudItem xs="6" Class="mt-3">
                            <MudText Typo="Typo.caption">Expected Delivery</MudText>
                            <MudText>@_order?.DeliveryDate.ToString("MMMM dd, yyyy")</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <!-- Order Items -->
            <MudCard Class="mt-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true">Order Items</MudText>
                    <MudTable Items="@_orderItems" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>Product</MudTh>
                            <MudTh>Quantity</MudTh>
                            <MudTh>Unit Price</MudTh>
                            <MudTh>Total</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.ProductName</MudTd>
                            <MudTd>@context.Quantity @context.Unit</MudTd>
                            <MudTd>€@context.UnitPrice.ToString("N2")</MudTd>
                            <MudTd><b>€@context.Total.ToString("N2")</b></MudTd>
                        </RowTemplate>
                        <FooterContent>
                            <MudTh colspan="3" Style="text-align: right;">Subtotal:</MudTh>
                            <MudTh><b>€@_order?.Total.ToString("N2")</b></MudTh>
                        </FooterContent>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Order Actions & Timeline -->
        <MudItem xs="12" md="4">
            <!-- Quick Actions -->
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true">Quick Actions</MudText>
                    <MudStack Spacing="2">
                        @if (_order?.Status == "Pending" || _order?.Status == "Processing")
                        {
                            <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Error" 
                                       StartIcon="@Icons.Material.Filled.Cancel"
                                       OnClick="CancelOrder">
                                Cancel Order
                            </MudButton>
                        }
                        @if (_order?.Status == "Delivered")
                        {
                            <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Success" 
                                       StartIcon="@Icons.Material.Filled.Refresh"
                                       OnClick="ReorderItems">
                                Reorder Same Items
                            </MudButton>
                        }
                        <MudButton FullWidth="true" Variant="Variant.Outlined" Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Download"
                                   OnClick="DownloadInvoice">
                            Download Invoice
                        </MudButton>
                        <MudButton FullWidth="true" Variant="Variant.Outlined" Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Message"
                                   OnClick="ContactSupplier">
                            Contact Supplier
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>

            <!-- Delivery Timeline -->
            <MudCard Class="mt-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true">Delivery Timeline</MudText>
                    <MudTimeline TimelineOrientation="TimelineOrientation.Vertical">
                        <MudTimelineItem Color="Color.Success" Size="Size.Small">
                            <ItemOpposite>
                                <MudText Typo="Typo.caption">@_order?.OrderDate.ToString("MMM dd, HH:mm")</MudText>
                            </ItemOpposite>
                            <ItemContent>
                                <MudText Typo="Typo.body2">Order Placed</MudText>
                            </ItemContent>
                        </MudTimelineItem>
                        @if (_order?.Status != "Pending")
                        {
                            <MudTimelineItem Color="Color.Success" Size="Size.Small">
                                <ItemOpposite>
                                    <MudText Typo="Typo.caption">@_order?.OrderDate.AddHours(2).ToString("MMM dd, HH:mm")</MudText>
                                </ItemOpposite>
                                <ItemContent>
                                    <MudText Typo="Typo.body2">Order Confirmed</MudText>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                        @if (_order?.Status == "Shipped" || _order?.Status == "Delivered")
                        {
                            <MudTimelineItem Color="Color.Success" Size="Size.Small">
                                <ItemOpposite>
                                    <MudText Typo="Typo.caption">@_order?.OrderDate.AddDays(1).ToString("MMM dd, HH:mm")</MudText>
                                </ItemOpposite>
                                <ItemContent>
                                    <MudText Typo="Typo.body2">Shipped</MudText>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                        @if (_order?.Status == "Delivered")
                        {
                            <MudTimelineItem Color="Color.Success" Size="Size.Small">
                                <ItemOpposite>
                                    <MudText Typo="Typo.caption">@_order?.DeliveryDate.ToString("MMM dd, HH:mm")</MudText>
                                </ItemOpposite>
                                <ItemContent>
                                    <MudText Typo="Typo.body2">Delivered</MudText>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                        else
                        {
                            <MudTimelineItem Color="Color.Default" Size="Size.Small">
                                <ItemOpposite>
                                    <MudText Typo="Typo.caption">@_order?.DeliveryDate.ToString("MMM dd")</MudText>
                                </ItemOpposite>
                                <ItemContent>
                                    <MudText Typo="Typo.body2">Expected Delivery</MudText>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public string OrderId { get; set; } = "";
    
    private OrderDetail? _order;
    private List<OrderItemDetail> _orderItems = new();
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override void OnInitialized()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Buyer Portal", href: "/portal/buyer", disabled: false),
            new BreadcrumbItem("Orders", href: "/portal/buyer/orders", disabled: false),
            new BreadcrumbItem(OrderId, href: null, disabled: true)
        };
        
        LoadOrderDetails();
    }
    
    private void LoadOrderDetails()
    {
        // Mock data - replace with actual API call
        _order = new OrderDetail
        {
            OrderNumber = OrderId,
            Supplier = OrderId switch
            {
                "ORD-2024-001" => "Italian Farms",
                "ORD-2024-002" => "Dutch Dairy",
                "ORD-2024-003" => "Spanish Oils",
                "ORD-2024-004" => "French Bakery",
                _ => "Unknown Supplier"
            },
            Status = OrderId switch
            {
                "ORD-2024-001" => "Pending",
                "ORD-2024-002" => "Shipped",
                "ORD-2024-003" => "Delivered",
                "ORD-2024-004" => "Processing",
                _ => "Unknown"
            },
            Total = OrderId switch
            {
                "ORD-2024-001" => 1250.50m,
                "ORD-2024-002" => 2340.80m,
                "ORD-2024-003" => 890.25m,
                "ORD-2024-004" => 456.75m,
                _ => 0m
            },
            OrderDate = DateTime.Now.AddDays(OrderId switch
            {
                "ORD-2024-001" => -5,
                "ORD-2024-002" => -3,
                "ORD-2024-003" => -7,
                "ORD-2024-004" => -2,
                _ => -1
            }),
            DeliveryDate = DateTime.Now.AddDays(OrderId switch
            {
                "ORD-2024-001" => 2,
                "ORD-2024-002" => 1,
                "ORD-2024-003" => -1,
                "ORD-2024-004" => 3,
                _ => 5
            })
        };
        
        // Load order items based on order
        if (OrderId == "ORD-2024-001")
        {
            _orderItems = new List<OrderItemDetail>
            {
                new OrderItemDetail { ProductName = "Organic Tomatoes", Quantity = 100, Unit = "kg", UnitPrice = 3.50m, Total = 350m },
                new OrderItemDetail { ProductName = "Fresh Basil", Quantity = 50, Unit = "kg", UnitPrice = 5.00m, Total = 250m },
                new OrderItemDetail { ProductName = "Buffalo Mozzarella", Quantity = 65, Unit = "kg", UnitPrice = 10.00m, Total = 650.50m }
            };
        }
        else if (OrderId == "ORD-2024-002")
        {
            _orderItems = new List<OrderItemDetail>
            {
                new OrderItemDetail { ProductName = "Gouda Cheese", Quantity = 80, Unit = "kg", UnitPrice = 12.50m, Total = 1000m },
                new OrderItemDetail { ProductName = "Edam Cheese", Quantity = 60, Unit = "kg", UnitPrice = 11.00m, Total = 660m },
                new OrderItemDetail { ProductName = "Fresh Milk", Quantity = 200, Unit = "L", UnitPrice = 1.50m, Total = 300m },
                new OrderItemDetail { ProductName = "Butter", Quantity = 40, Unit = "kg", UnitPrice = 8.00m, Total = 320m },
                new OrderItemDetail { ProductName = "Yogurt", Quantity = 100, Unit = "L", UnitPrice = 0.608m, Total = 60.80m }
            };
        }
    }
    
    private Color GetStatusColor(string status) => status switch
    {
        "Pending" => Color.Warning,
        "Processing" => Color.Info,
        "Shipped" => Color.Primary,
        "Delivered" => Color.Success,
        "Cancelled" => Color.Error,
        _ => Color.Default
    };
    
    private void CancelOrder()
    {
        Snackbar.Add("Order cancellation requested. You will receive a confirmation email.", Severity.Warning);
    }
    
    private void ReorderItems()
    {
        Snackbar.Add("Items added to cart for reordering", Severity.Success);
        Navigation.NavigateTo("/portal/buyer/cart");
    }
    
    private void DownloadInvoice()
    {
        Snackbar.Add("Invoice download started...", Severity.Info);
    }
    
    private void ContactSupplier()
    {
        Snackbar.Add($"Opening chat with {_order?.Supplier}...", Severity.Info);
    }
    
    private class OrderDetail
    {
        public string OrderNumber { get; set; } = "";
        public string Supplier { get; set; } = "";
        public string Status { get; set; } = "";
        public decimal Total { get; set; }
        public DateTime OrderDate { get; set; }
        public DateTime DeliveryDate { get; set; }
    }
    
    private class OrderItemDetail
    {
        public string ProductName { get; set; } = "";
        public decimal Quantity { get; set; }
        public string Unit { get; set; } = "";
        public decimal UnitPrice { get; set; }
        public decimal Total { get; set; }
    }
}