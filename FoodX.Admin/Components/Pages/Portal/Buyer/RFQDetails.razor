@page "/portal/buyer/rfq/{RfqId}"
@using Microsoft.AspNetCore.Authorization
@using FoodX.Admin.Components.Dialogs
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@attribute [Authorize(Roles = "SuperAdmin,Admin,Buyer")]
@rendermode InteractiveServer

<PageTitle>RFQ Details - FoodX Buyer Portal</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudBreadcrumbs Items="_breadcrumbs" />
        </MudItem>
        
        <MudItem xs="12">
            <MudText Typo="Typo.h4" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.RequestQuote" Class="mr-2" />
                RFQ Details: @RfqId
            </MudText>
        </MudItem>

        <!-- RFQ Information Card -->
        <MudItem xs="12" md="8">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true">Request Information</MudText>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption">Product</MudText>
                            <MudText>@_rfqDetail?.Product</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption">Quantity</MudText>
                            <MudText>@_rfqDetail?.Quantity</MudText>
                        </MudItem>
                        <MudItem xs="6" Class="mt-3">
                            <MudText Typo="Typo.caption">Deadline</MudText>
                            <MudText>@_rfqDetail?.Deadline.ToString("MMMM dd, yyyy")</MudText>
                        </MudItem>
                        <MudItem xs="6" Class="mt-3">
                            <MudText Typo="Typo.caption">Status</MudText>
                            <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(_rfqDetail?.Status ?? "")">
                                @_rfqDetail?.Status
                            </MudChip>
                        </MudItem>
                        <MudItem xs="12" Class="mt-3">
                            <MudText Typo="Typo.caption">Description</MudText>
                            <MudText>@_rfqDetail?.Description</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Quick Stats -->
        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true">Statistics</MudText>
                    <div class="d-flex justify-space-between mb-2">
                        <MudText>Total Responses:</MudText>
                        <MudText Color="Color.Primary"><b>@_quotes.Count</b></MudText>
                    </div>
                    <div class="d-flex justify-space-between mb-2">
                        <MudText>Average Price:</MudText>
                        <MudText Color="Color.Success"><b>@GetAveragePrice()</b></MudText>
                    </div>
                    <div class="d-flex justify-space-between">
                        <MudText>Time Remaining:</MudText>
                        <MudText Color="@GetTimeRemainingColor()"><b>@GetTimeRemaining()</b></MudText>
                    </div>
                </MudCardContent>
                <MudCardActions>
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" 
                               OnClick="CloseRFQ">
                        Close RFQ
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <!-- Quotes/Responses -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h6" GutterBottom="true">Supplier Responses</MudText>
                
                @if (_quotes.Any())
                {
                    <MudTable Items="@_quotes" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Supplier</MudTh>
                            <MudTh>Price/Unit</MudTh>
                            <MudTh>Total Price</MudTh>
                            <MudTh>Delivery Date</MudTh>
                            <MudTh>Rating</MudTh>
                            <MudTh>Notes</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.SupplierName</MudTd>
                            <MudTd>@context.PricePerUnit.ToString("C")</MudTd>
                            <MudTd><b>@context.TotalPrice.ToString("C")</b></MudTd>
                            <MudTd>@context.DeliveryDate.ToString("MMM dd")</MudTd>
                            <MudTd>
                                <MudRating ReadOnly="true" SelectedValue="@context.SupplierRating" Size="Size.Small" />
                            </MudTd>
                            <MudTd>@context.Notes</MudTd>
                            <MudTd>
                                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Success"
                                           OnClick="@(() => AcceptQuote(context))" Class="mr-2">
                                    Accept
                                </MudButton>
                                <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary"
                                           OnClick="@(() => ViewSupplier(context))">
                                    View Supplier
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3">
                        No supplier responses yet. Check back later or consider extending the deadline.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public string RfqId { get; set; } = "";
    
    private RFQDetail? _rfqDetail;
    private List<QuoteResponse> _quotes = new();
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override void OnInitialized()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Buyer Portal", href: "/portal/buyer", disabled: false),
            new BreadcrumbItem("RFQs", href: "/portal/buyer/rfqs", disabled: false),
            new BreadcrumbItem(RfqId, href: null, disabled: true)
        };
        
        LoadRFQDetails();
        LoadQuotes();
    }
    
    private void LoadRFQDetails()
    {
        // Mock data - replace with actual API call
        _rfqDetail = new RFQDetail
        {
            Id = RfqId,
            Product = RfqId switch
            {
                "RFQ-2024-001" => "Organic Tomatoes",
                "RFQ-2024-002" => "Fresh Mozzarella",
                "RFQ-2024-003" => "Olive Oil",
                _ => "Unknown Product"
            },
            Quantity = RfqId switch
            {
                "RFQ-2024-001" => "500kg",
                "RFQ-2024-002" => "200kg",
                "RFQ-2024-003" => "1000L",
                _ => "N/A"
            },
            Deadline = DateTime.Now.AddDays(RfqId switch
            {
                "RFQ-2024-001" => 3,
                "RFQ-2024-002" => 7,
                "RFQ-2024-003" => 1,
                _ => 5
            }),
            Status = RfqId == "RFQ-2024-003" ? "Expiring" : "Active",
            Description = "Looking for high-quality products with competitive pricing. Must meet our quality standards and delivery requirements."
        };
    }
    
    private void LoadQuotes()
    {
        // Mock data - replace with actual API call
        if (RfqId == "RFQ-2024-001")
        {
            _quotes = new List<QuoteResponse>
            {
                new QuoteResponse 
                { 
                    SupplierName = "Fresh Farms Ltd", 
                    PricePerUnit = 3.50m, 
                    TotalPrice = 1750m, 
                    DeliveryDate = DateTime.Now.AddDays(2),
                    SupplierRating = 4,
                    Notes = "Premium organic, certified"
                },
                new QuoteResponse 
                { 
                    SupplierName = "Green Valley Produce", 
                    PricePerUnit = 3.25m, 
                    TotalPrice = 1625m, 
                    DeliveryDate = DateTime.Now.AddDays(3),
                    SupplierRating = 5,
                    Notes = "Local supplier, same day delivery"
                },
                new QuoteResponse 
                { 
                    SupplierName = "Nature's Best", 
                    PricePerUnit = 3.75m, 
                    TotalPrice = 1875m, 
                    DeliveryDate = DateTime.Now.AddDays(1),
                    SupplierRating = 3,
                    Notes = "Express delivery available"
                }
            };
        }
        else if (RfqId == "RFQ-2024-003")
        {
            _quotes = new List<QuoteResponse>
            {
                new QuoteResponse 
                { 
                    SupplierName = "Mediterranean Oils", 
                    PricePerUnit = 12.50m, 
                    TotalPrice = 12500m, 
                    DeliveryDate = DateTime.Now.AddDays(5),
                    SupplierRating = 5,
                    Notes = "Extra virgin, cold pressed"
                }
            };
        }
    }
    
    private Color GetStatusColor(string status) => status switch
    {
        "Active" => Color.Success,
        "Expiring" => Color.Warning,
        "Closed" => Color.Default,
        _ => Color.Default
    };
    
    private string GetAveragePrice()
    {
        if (!_quotes.Any()) return "N/A";
        var avg = _quotes.Average(q => q.TotalPrice);
        return avg.ToString("C");
    }
    
    private string GetTimeRemaining()
    {
        if (_rfqDetail == null) return "N/A";
        var remaining = _rfqDetail.Deadline - DateTime.Now;
        if (remaining.TotalDays > 1)
            return $"{(int)remaining.TotalDays} days";
        else if (remaining.TotalHours > 1)
            return $"{(int)remaining.TotalHours} hours";
        else
            return "Expiring soon";
    }
    
    private Color GetTimeRemainingColor()
    {
        if (_rfqDetail == null) return Color.Default;
        var remaining = _rfqDetail.Deadline - DateTime.Now;
        if (remaining.TotalDays > 3) return Color.Success;
        if (remaining.TotalDays > 1) return Color.Warning;
        return Color.Error;
    }
    
    private void CloseRFQ()
    {
        Snackbar.Add("RFQ closed successfully", Severity.Success);
        Navigation.NavigateTo("/portal/buyer/rfqs");
    }
    
    private void AcceptQuote(QuoteResponse quote)
    {
        Snackbar.Add($"Quote from {quote.SupplierName} accepted! Creating order...", Severity.Success);
        // Navigate to order creation or show confirmation dialog
    }
    
    private async void ViewSupplier(QuoteResponse quote)
    {
        var parameters = new DialogParameters<SupplierDetailsDialog>
        {
            { x => x.Supplier, GetSupplierDetails(quote) }
        };
        
        var options = new DialogOptions 
        { 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };
        
        var dialog = await DialogService.ShowAsync<SupplierDetailsDialog>($"Supplier Details - {quote.SupplierName}", parameters, options);
        var result = await dialog.Result;
        
        if (result != null && !result.Canceled && result.Data is bool contactSupplier && contactSupplier)
        {
            // Handle contact supplier action
            Snackbar.Add($"Opening communication channel with {quote.SupplierName}", Severity.Success);
        }
    }
    
    private SupplierDetailsDialog.SupplierDetails GetSupplierDetails(QuoteResponse quote)
    {
        // Mock supplier details - in production, this would come from database
        return new SupplierDetailsDialog.SupplierDetails
        {
            Name = quote.SupplierName,
            Rating = quote.SupplierRating,
            RegistrationNumber = $"REG-{Random.Shared.Next(100000, 999999)}",
            EstablishedYear = Random.Shared.Next(1990, 2020).ToString(),
            Location = quote.SupplierName switch
            {
                "Fresh Farms Ltd" => "California, USA",
                "Green Valley Produce" => "Ontario, Canada",
                "Nature's Best" => "Texas, USA",
                "Mediterranean Oils" => "Tuscany, Italy",
                _ => "New York, USA"
            },
            CompanySize = quote.SupplierName switch
            {
                "Fresh Farms Ltd" => "50-200 employees",
                "Green Valley Produce" => "10-50 employees",
                _ => "200+ employees"
            },
            Email = $"sales@{quote.SupplierName.Replace(" ", "").ToLower()}.com",
            Phone = $"+1 555-{Random.Shared.Next(100, 999)}-{Random.Shared.Next(1000, 9999)}",
            Website = $"https://www.{quote.SupplierName.Replace(" ", "").ToLower()}.com",
            ContactPerson = quote.SupplierName switch
            {
                "Fresh Farms Ltd" => "John Smith",
                "Green Valley Produce" => "Sarah Johnson",
                "Nature's Best" => "Michael Brown",
                _ => "David Wilson"
            },
            Categories = quote.SupplierName switch
            {
                "Fresh Farms Ltd" => new List<string> { "Organic Vegetables", "Fresh Fruits", "Herbs" },
                "Green Valley Produce" => new List<string> { "Vegetables", "Dairy", "Local Produce" },
                "Mediterranean Oils" => new List<string> { "Olive Oil", "Specialty Oils", "Vinegars" },
                _ => new List<string> { "General Produce", "Organic", "Specialty Items" }
            },
            Certifications = quote.SupplierName switch
            {
                "Fresh Farms Ltd" => new List<string> { "USDA Organic", "GlobalGAP", "ISO 9001", "Fair Trade" },
                "Green Valley Produce" => new List<string> { "Canada Organic", "HACCP", "ISO 22000" },
                _ => new List<string> { "ISO 9001", "HACCP", "FDA Approved" }
            },
            CompletedOrders = Random.Shared.Next(50, 500),
            OnTimeDelivery = Random.Shared.Next(85, 100),
            ResponseTime = $"{Random.Shared.Next(1, 24)}h",
            MemberSince = Random.Shared.Next(2018, 2023).ToString()
        };
    }
    
    private class RFQDetail
    {
        public string Id { get; set; } = "";
        public string Product { get; set; } = "";
        public string Quantity { get; set; } = "";
        public DateTime Deadline { get; set; }
        public string Status { get; set; } = "";
        public string Description { get; set; } = "";
    }
    
    private class QuoteResponse
    {
        public string SupplierName { get; set; } = "";
        public decimal PricePerUnit { get; set; }
        public decimal TotalPrice { get; set; }
        public DateTime DeliveryDate { get; set; }
        public int SupplierRating { get; set; }
        public string Notes { get; set; } = "";
    }
}