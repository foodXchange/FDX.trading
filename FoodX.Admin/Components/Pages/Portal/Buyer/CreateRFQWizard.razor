@page "/portal/buyer/rfq/create-wizard"
@using FoodX.Admin.Models
@using FoodX.Admin.Services
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject IRFQService RFQService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Buyer")]

<PageTitle>Create New RFQ</PageTitle>

<div class="d-flex align-center mb-4">
    <MudButton Variant="Variant.Text"
               StartIcon="Icons.Material.Filled.ArrowBack"
               OnClick="GoBack"
               Class="mr-2">
        Back to RFQs
    </MudButton>
    <MudText Typo="Typo.h4" Color="Color.Primary">Create New RFQ</MudText>
</div>

<MudCard>
    <MudCardContent>
        <MudStepper @bind-ActiveIndex="currentStep">

            <!-- Step 1: Basic Information -->
            <MudStep Title="Basic Information" Icon="Icons.Material.Filled.Info">
                <MudGrid>
                    <MudItem xs="12" md="8">
                        <MudTextField @bind-Value="rfq.Title"
                                     Label="RFQ Title"
                                     Variant="Variant.Outlined"
                                     HelperText="Provide a clear, descriptive title for your RFQ"
                                     Required="true"
                                     Counter="100"
                                     MaxLength="100"
                                     Immediate="true"
                                     Validation="@(new Func<string, IEnumerable<string>>(ValidateTitle))" />
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudDatePicker @bind-Date="submissionDeadline"
                                      Label="Submission Deadline"
                                      Variant="Variant.Outlined"
                                      MinDate="DateTime.Today.AddDays(1)"
                                      Required="true" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="rfq.Description"
                                     Label="Description"
                                     Variant="Variant.Outlined"
                                     Lines="4"
                                     HelperText="Provide detailed requirements and specifications" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="rfq.DeliveryLocation"
                                     Label="Delivery Location"
                                     Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudSelect @bind-Value="selectedProjectId"
                                  Label="Project (Optional)"
                                  Variant="Variant.Outlined">
                            <MudSelectItem Value="@((int?)null)">No Project</MudSelectItem>
                            @foreach (var project in availableProjects)
                            {
                                <MudSelectItem Value="project.Id">@project.ProjectName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="rfq.Terms"
                                     Label="Terms and Conditions"
                                     Variant="Variant.Outlined"
                                     Lines="3"
                                     HelperText="Payment terms, delivery requirements, quality specifications, etc." />
                    </MudItem>
                </MudGrid>

                <div class="d-flex justify-end mt-4">
                    <MudButton Variant="Variant.Filled"
                              Color="Color.Primary"
                              OnClick="NextStep"
                              Disabled="@(!IsStep1Valid())">
                        Next: Add Products
                    </MudButton>
                </div>
            </MudStep>

            <!-- Step 2: Product Lines -->
            <MudStep Title="Product Requirements" Icon="Icons.Material.Filled.Inventory">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Product Requirements</MudText>
                    <MudButton Variant="Variant.Outlined"
                              Color="Color.Primary"
                              StartIcon="Icons.Material.Filled.Add"
                              OnClick="AddProductLine">
                        Add Product
                    </MudButton>
                </div>

                @if (rfqLines.Any())
                {
                    <MudTable Items="@rfqLines" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>Product Name</MudTh>
                            <MudTh>Quantity</MudTh>
                            <MudTh>Unit</MudTh>
                            <MudTh>Specifications</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Product Name">
                                <MudTextField @bind-Value="context.ProductName"
                                            Variant="Variant.Text"
                                            Margin="Margin.Dense" />
                            </MudTd>
                            <MudTd DataLabel="Quantity">
                                <MudNumericField @bind-Value="context.Quantity"
                                               Variant="Variant.Text"
                                               Margin="Margin.Dense"
                                               Min="0" />
                            </MudTd>
                            <MudTd DataLabel="Unit">
                                <MudSelect @bind-Value="context.Unit"
                                          Variant="Variant.Text"
                                          Margin="Margin.Dense">
                                    <MudSelectItem Value="@("kg")">kg</MudSelectItem>
                                    <MudSelectItem Value="@("tons")">tons</MudSelectItem>
                                    <MudSelectItem Value="@("pieces")">pieces</MudSelectItem>
                                    <MudSelectItem Value="@("boxes")">boxes</MudSelectItem>
                                    <MudSelectItem Value="@("liters")">liters</MudSelectItem>
                                </MudSelect>
                            </MudTd>
                            <MudTd DataLabel="Specifications">
                                <MudTextField @bind-Value="context.Specification"
                                            Variant="Variant.Text"
                                            Margin="Margin.Dense" />
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudIconButton Icon="Icons.Material.Filled.Delete"
                                             Color="Color.Error"
                                             Size="Size.Small"
                                             OnClick="@(() => RemoveProductLine(context))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <div class="text-center pa-8">
                        <MudIcon Icon="Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Default" />
                        <MudText Typo="Typo.h6" Color="Color.Default">No products added yet</MudText>
                        <MudText Color="Color.Default">Add at least one product to continue</MudText>
                    </div>
                }

                <div class="d-flex justify-space-between mt-4">
                    <MudButton Variant="Variant.Text"
                              StartIcon="Icons.Material.Filled.ArrowBack"
                              OnClick="PreviousStep">
                        Back
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                              Color="Color.Primary"
                              OnClick="NextStep"
                              Disabled="@(!IsStep2Valid())">
                        Next: Review & Submit
                    </MudButton>
                </div>
            </MudStep>

            <!-- Step 3: Review and Submit -->
            <MudStep Title="Review & Submit" Icon="Icons.Material.Filled.Send">
                <MudText Typo="Typo.h6" Class="mb-4">Review Your RFQ</MudText>

                <!-- RFQ Summary -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">RFQ Details</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudText><strong>Title:</strong> @rfq.Title</MudText>
                                <MudText><strong>Deadline:</strong> @submissionDeadline?.ToString("MMMM dd, yyyy")</MudText>
                                <MudText><strong>Delivery Location:</strong> @(rfq.DeliveryLocation ?? "Not specified")</MudText>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudText><strong>Project:</strong> @(selectedProjectId.HasValue ? availableProjects.FirstOrDefault(p => p.Id == selectedProjectId)?.ProjectName ?? "None" : "None")</MudText>
                                <MudText><strong>Total Products:</strong> @rfqLines.Count</MudText>
                            </MudItem>
                        </MudGrid>

                        @if (!string.IsNullOrEmpty(rfq.Description))
                        {
                            <MudDivider Class="my-3" />
                            <MudText><strong>Description:</strong></MudText>
                            <MudText Class="ml-2">@rfq.Description</MudText>
                        }
                    </MudCardContent>
                </MudCard>

                <!-- Product Summary -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Product Requirements</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable Items="@rfqLines" Dense="true">
                            <HeaderContent>
                                <MudTh>Product</MudTh>
                                <MudTh>Quantity</MudTh>
                                <MudTh>Specifications</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.ProductName</MudTd>
                                <MudTd>@context.Quantity @context.Unit</MudTd>
                                <MudTd>@(context.Specification ?? "None specified")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>

                <!-- Submit Actions -->
                <div class="d-flex justify-space-between">
                    <MudButton Variant="Variant.Text"
                              StartIcon="Icons.Material.Filled.ArrowBack"
                              OnClick="PreviousStep">
                        Back
                    </MudButton>

                    <div class="d-flex gap-2">
                        <MudButton Variant="Variant.Filled"
                                  Color="Color.Primary"
                                  StartIcon="Icons.Material.Filled.Send"
                                  OnClick="SubmitRFQ"
                                  Disabled="@submitting">
                            @if (submitting)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <span class="ml-2">Creating RFQ...</span>
                            }
                            else
                            {
                                <span>Submit RFQ</span>
                            }
                        </MudButton>
                    </div>
                </div>
            </MudStep>
        </MudStepper>
    </MudCardContent>
</MudCard>

@code {
    private RFQ rfq = new();
    private List<RFQLines> rfqLines = new();
    private List<Project> availableProjects = new();
    private DateTime? submissionDeadline;
    private int? selectedProjectId;
    private bool submitting = false;
    private int currentStep = 0;

    protected override async Task OnInitializedAsync()
    {
        rfq.BuyerId = await GetCurrentBuyerIdAsync();
        rfq.BuyerName = await GetCurrentBuyerNameAsync();

        // Set default deadline to 7 days from now
        submissionDeadline = DateTime.Today.AddDays(7);
    }

    private async Task<int?> GetCurrentBuyerIdAsync()
    {
        // TODO: Get from authentication context
        return 1; // Placeholder
    }

    private async Task<string?> GetCurrentBuyerNameAsync()
    {
        // TODO: Get from authentication context
        return "Sample Buyer"; // Placeholder
    }

    private bool IsStep1Valid()
    {
        return !string.IsNullOrEmpty(rfq.Title) && submissionDeadline.HasValue && submissionDeadline > DateTime.Today;
    }

    private bool IsStep2Valid()
    {
        return rfqLines.Any() && rfqLines.All(l => !string.IsNullOrEmpty(l.ProductName) && l.Quantity > 0);
    }

    private void NextStep()
    {
        currentStep++;
        StateHasChanged();
    }

    private void PreviousStep()
    {
        currentStep--;
        StateHasChanged();
    }

    private void AddProductLine()
    {
        rfqLines.Add(new RFQLines
        {
            ProductName = "",
            Quantity = 1,
            Unit = "kg"
        });
    }

    private void RemoveProductLine(RFQLines line)
    {
        rfqLines.Remove(line);
    }

    private async Task SubmitRFQ()
    {
        try
        {
            submitting = true;

            // Set values from form
            rfq.SubmissionDeadline = submissionDeadline!.Value;
            rfq.ProjectId = selectedProjectId;
            rfq.Status = "Open";

            // Create the RFQ
            var createdRFQ = await RFQService.CreateRFQAsync(rfq, rfqLines);

            Snackbar.Add($"RFQ {createdRFQ.RFQNumber} created successfully!", Severity.Success);

            // Navigate to the created RFQ
            Navigation.NavigateTo($"/portal/buyer/rfq/{createdRFQ.Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating RFQ: {ex.Message}", Severity.Error);
        }
        finally
        {
            submitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/portal/buyer/rfqs");
    }

    private IEnumerable<string> ValidateTitle(string title)
    {
        if (string.IsNullOrWhiteSpace(title))
            yield return "Title is required";
        if (title?.Length < 5)
            yield return "Title must be at least 5 characters";
        if (title?.Length > 100)
            yield return "Title cannot exceed 100 characters";
    }

    private IEnumerable<string> ValidateProductName(string productName)
    {
        if (string.IsNullOrWhiteSpace(productName))
            yield return "Product name is required";
        if (productName?.Length < 2)
            yield return "Product name must be at least 2 characters";
    }

    private IEnumerable<string> ValidateQuantity(decimal quantity)
    {
        if (quantity <= 0)
            yield return "Quantity must be greater than 0";
        if (quantity > 1000000)
            yield return "Quantity seems unrealistic";
    }
}

<style>
    .mud-stepper-content {
        min-height: 400px;
    }
</style>