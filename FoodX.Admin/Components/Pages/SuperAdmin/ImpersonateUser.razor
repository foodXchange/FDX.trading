@page "/superadmin/impersonate"
@using FoodX.Admin.Data
@using FoodX.Admin.Models
@using FoodX.Admin.Services
@using FoodX.Admin.Components.Dialogs
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject FoodXDbContext DbContext
@inject NavigationManager NavigationManager
@inject IPortalContextService PortalContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@attribute [Authorize(Roles = "SuperAdmin")]
@rendermode InteractiveServer

<PageTitle>User Impersonation - FoodX</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.PersonSearch" Class="mr-2" />
                User Impersonation
            </MudText>
            <MudText Typo="Typo.body1" Class="mb-4">
                View the platform as any user to assist with support or testing
            </MudText>
        </MudItem>

        @if (PortalContext.IsImpersonating)
        {
            <!-- Current Impersonation Status -->
            <MudItem xs="12">
                <MudPaper Class="pa-4" Elevation="2" Style="border: 2px solid var(--mud-palette-warning);">
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <MudText Typo="Typo.h6" Color="Color.Warning">
                                <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-2" />
                                Impersonation Active
                            </MudText>
                            <MudText Class="mt-2">
                                <strong>Currently impersonating:</strong> @PortalContext.ImpersonatedUser?.Identity?.Name
                            </MudText>
                            <MudText>
                                <strong>Started:</strong> @PortalContext.ImpersonationStartTime?.ToString("MMM dd, yyyy HH:mm:ss")
                            </MudText>
                            @if (_timeRemaining.HasValue)
                            {
                                <MudText>
                                    <strong>Time remaining:</strong> @FormatTimeRemaining(_timeRemaining.Value)
                                </MudText>
                            }
                        </MudItem>
                        <MudItem xs="12" md="4" Class="text-right">
                            <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Large"
                                       OnClick="EndImpersonation"
                                       StartIcon="@Icons.Material.Filled.Stop">
                                End Impersonation
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        }
        else
        {
            <!-- Start New Impersonation -->
            <MudItem xs="12">
                <MudPaper Class="pa-4" Elevation="2">
                    <MudText Typo="Typo.h6" Class="mb-4">Start Impersonation Session</MudText>
                    
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudCard Elevation="0" Outlined="true">
                                <MudCardContent>
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Large" />
                                    <MudText Typo="Typo.h6" Class="mt-2">How Impersonation Works</MudText>
                                    <MudList T="string" Dense="true" Class="mt-3">
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check">
                                            View the platform exactly as the selected user sees it
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check">
                                            Access their dashboards, data, and permissions
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check">
                                            All actions are logged for security purposes
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check">
                                            Sessions automatically expire after 30 minutes
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check">
                                            Cannot impersonate other SuperAdmin users
                                        </MudListItem>
                                    </MudList>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudCard Elevation="0" Outlined="true">
                                <MudCardContent>
                                    <MudIcon Icon="@Icons.Material.Filled.Security" Color="Color.Warning" Size="Size.Large" />
                                    <MudText Typo="Typo.h6" Class="mt-2">Security & Compliance</MudText>
                                    <MudList T="string" Dense="true" Class="mt-3">
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.History">
                                            All impersonation sessions are logged
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Timer">
                                            30-minute automatic timeout
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Visibility">
                                            User sees impersonation banner
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Shield">
                                            Cannot modify critical security settings
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Email">
                                            User is notified of impersonation (if enabled)
                                        </MudListItem>
                                    </MudList>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                    
                    <div class="text-center mt-4">
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large"
                                   OnClick="OpenImpersonationDialog"
                                   StartIcon="@Icons.Material.Filled.PersonSearch">
                            Select User to Impersonate
                        </MudButton>
                    </div>
                </MudPaper>
            </MudItem>
        }

        <!-- Recent Impersonation Sessions -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h6" Class="mb-4">Recent Impersonation Sessions</MudText>
                
                <MudTable Items="@_recentSessions" Dense="true" Hover="true" Bordered="true">
                    <HeaderContent>
                        <MudTh>User</MudTh>
                        <MudTh>Role</MudTh>
                        <MudTh>Started</MudTh>
                        <MudTh>Ended</MudTh>
                        <MudTh>Duration</MudTh>
                        <MudTh>Actions Performed</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="User">
                            <MudText>@context.UserName</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Tertiary">@context.UserEmail</MudText>
                        </MudTd>
                        <MudTd DataLabel="Role">
                            <MudChip T="string" Size="Size.Small" Color="GetRoleColor(context.UserRole)">
                                @context.UserRole
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Started">@context.StartTime.ToString("MMM dd, HH:mm")</MudTd>
                        <MudTd DataLabel="Ended">
                            @if (context.EndTime.HasValue)
                            {
                                @context.EndTime.Value.ToString("MMM dd, HH:mm")
                            }
                            else
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Success">Active</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Duration">@context.Duration</MudTd>
                        <MudTd DataLabel="Actions">@context.ActionsPerformed</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private TimeSpan? _timeRemaining;
    private System.Timers.Timer? _timer;
    private List<ImpersonationSession> _recentSessions = new();

    protected override Task OnInitializedAsync()
    {
        LoadRecentSessions();
        
        if (PortalContext.IsImpersonating)
        {
            StartTimer();
        }
        
        PortalContext.ImpersonationChanged += OnImpersonationChanged;
        return Task.CompletedTask;
    }
    
    private void LoadRecentSessions()
    {
        // Mock data for now - would load from database in production
        _recentSessions = new List<ImpersonationSession>
        {
            new ImpersonationSession
            {
                UserName = "John Smith",
                UserEmail = "john.smith@carrefour.com",
                UserRole = "Buyer",
                StartTime = DateTime.Now.AddHours(-2),
                EndTime = DateTime.Now.AddHours(-1.5),
                Duration = "30 min",
                ActionsPerformed = 12
            },
            new ImpersonationSession
            {
                UserName = "Maria Garcia",
                UserEmail = "maria@italianfarms.it",
                UserRole = "Supplier",
                StartTime = DateTime.Now.AddHours(-4),
                EndTime = DateTime.Now.AddHours(-3.2),
                Duration = "48 min",
                ActionsPerformed = 27
            },
            new ImpersonationSession
            {
                UserName = "Peter Johnson",
                UserEmail = "p.johnson@metro.de",
                UserRole = "Buyer",
                StartTime = DateTime.Now.AddDays(-1),
                EndTime = DateTime.Now.AddDays(-1).AddMinutes(15),
                Duration = "15 min",
                ActionsPerformed = 8
            }
        };
        
        if (PortalContext.IsImpersonating && PortalContext.ImpersonatedUser != null)
        {
            _recentSessions.Insert(0, new ImpersonationSession
            {
                UserName = PortalContext.ImpersonatedUser.Identity?.Name ?? "Unknown",
                UserEmail = PortalContext.ImpersonatedUser.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "",
                UserRole = PortalContext.ImpersonatedUser.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value ?? "User",
                StartTime = PortalContext.ImpersonationStartTime ?? DateTime.Now,
                EndTime = null,
                Duration = "Active",
                ActionsPerformed = 0
            });
        }
    }
    
    private void OnImpersonationChanged(object? sender, ImpersonationEventArgs e)
    {
        if (e.IsImpersonating)
        {
            StartTimer();
        }
        else
        {
            StopTimer();
        }
        
        LoadRecentSessions();
        InvokeAsync(StateHasChanged);
    }
    
    private void StartTimer()
    {
        _timer?.Dispose();
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += (sender, e) =>
        {
            _timeRemaining = PortalContext.GetImpersonationTimeRemaining();
            InvokeAsync(StateHasChanged);
        };
        _timer.Start();
    }
    
    private void StopTimer()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;
    }
    
    private async Task OpenImpersonationDialog()
    {
        var parameters = new DialogParameters<ImpersonateUserDialog>();
        parameters.Add(x => x.OnImpersonationStarted, EventCallback.Factory.Create<string>(this, StartImpersonationSession));
        
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };
        
        var dialog = await DialogService.ShowAsync<ImpersonateUserDialog>("Select User to Impersonate", parameters, options);
        var result = await dialog.Result;
        
        if (result != null && !result.Canceled && result.Data is ApplicationUser user)
        {
            await StartImpersonationSession(user.Id);
        }
    }
    
    private async Task StartImpersonationSession(string userId)
    {
        var success = await PortalContext.StartImpersonation(userId);
        
        if (success)
        {
            Snackbar.Add("Impersonation started successfully", Severity.Success);
            
            // Navigate to appropriate dashboard based on user's role
            if (PortalContext.CurrentMode == PortalMode.Supplier)
            {
                NavigationManager.NavigateTo("/portal/supplier/dashboard");
            }
            else if (PortalContext.CurrentMode == PortalMode.Buyer)
            {
                NavigationManager.NavigateTo("/portal/buyer/dashboard");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            Snackbar.Add("Failed to start impersonation", Severity.Error);
        }
    }
    
    private void EndImpersonation()
    {
        PortalContext.EndImpersonation();
        Snackbar.Add("Impersonation ended", Severity.Info);
        NavigationManager.NavigateTo("/superadmin/impersonate");
    }
    
    private string FormatTimeRemaining(TimeSpan time)
    {
        if (time.TotalMinutes >= 1)
            return $"{(int)time.TotalMinutes}:{time.Seconds:D2} minutes";
        else
            return $"{time.Seconds} seconds";
    }
    
    private Color GetRoleColor(string role)
    {
        return role switch
        {
            "SuperAdmin" => Color.Error,
            "Admin" => Color.Primary,
            "Supplier" => Color.Success,
            "Buyer" => Color.Info,
            "Agent" => Color.Warning,
            _ => Color.Default
        };
    }
    
    public void Dispose()
    {
        PortalContext.ImpersonationChanged -= OnImpersonationChanged;
        StopTimer();
    }
    
    private class ImpersonationSession
    {
        public string UserName { get; set; } = "";
        public string UserEmail { get; set; } = "";
        public string UserRole { get; set; } = "";
        public DateTime StartTime { get; set; }
        public DateTime? EndTime { get; set; }
        public string Duration { get; set; } = "";
        public int ActionsPerformed { get; set; }
    }
}