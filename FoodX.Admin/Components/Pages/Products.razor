@page "/products"
@using FoodX.Admin.Data
@using FoodX.Admin.Models
@using FoodX.Admin.Components.Dialogs
@using FoodX.Admin.Repositories
@using FoodX.Admin.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@inject IUnitOfWork UnitOfWork
@inject IPaginatedProductService ProductService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IMemoryCache MemoryCache
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Products</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Products Catalog</MudText>
    
    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudTextField Value="@searchTerm"
                              ValueChanged="@((string value) => OnSearchTermChanged(value))"
                              Label="Search Products"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate="true" />
            </MudItem>
            <MudItem xs="12" md="2">
                <MudSelect @bind-Value="selectedCategory" Label="Category" Variant="Variant.Outlined">
                    @foreach (var category in categories)
                    {
                        <MudSelectItem T="string" Value="@category">@category</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="2">
                <MudSelect @bind-Value="viewMode" Label="View" Variant="Variant.Outlined">
                    <MudSelectItem T="ViewMode" Value="ViewMode.Cards">Cards</MudSelectItem>
                    <MudSelectItem T="ViewMode" Value="ViewMode.Table">Table</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="OpenAddProductDialog">
                        Add Product
                    </MudButton>
                    @if (selectedProducts.Any())
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   OnClick="BulkDeleteProducts">
                            Delete (@selectedProducts.Count)
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Success"
                                   StartIcon="@Icons.Material.Filled.FileDownload"
                                   OnClick="ExportSelected">
                            Export Selected
                        </MudButton>
                    }
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-2">Loading products...</MudText>
    }
    else if (viewMode == ViewMode.Table)
    {
        <MudTable Items="@paginatedResult?.Items" Hover="true" Striped="true" Dense="true"
                  MultiSelection="true" @bind-SelectedItems="selectedProducts">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x => x.Category)">Category</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x => x.Price)">Price</MudTableSortLabel></MudTh>
                <MudTh>Unit</MudTh>
                <MudTh>SKU</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x => x.StockQuantity)">Stock</MudTableSortLabel></MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    <MudStack Row="true" Spacing="1">
                        @if (!string.IsNullOrEmpty(context.ImageUrl))
                        {
                            <MudAvatar Size="Size.Small" Square="true">
                                <MudImage Src="@context.ImageUrl" />
                            </MudAvatar>
                        }
                        <MudText>@context.Name</MudText>
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="Category">@context.Category</MudTd>
                <MudTd DataLabel="Price">$@context.Price.ToString("F2")</MudTd>
                <MudTd DataLabel="Unit">@context.Unit</MudTd>
                <MudTd DataLabel="SKU">@(context.SKU ?? "-")</MudTd>
                <MudTd DataLabel="Stock">
                    @if (context.StockQuantity > 10)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Success">@context.StockQuantity</MudChip>
                    }
                    else if (context.StockQuantity > 0)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Warning">@context.StockQuantity</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Error">Out of Stock</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Status">
                    <MudChip T="string" Size="Size.Small" Color="@(context.IsActive ? Color.Success : Color.Error)">
                        @(context.IsActive ? "Active" : "Inactive")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditProduct(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => DeleteProduct(context))" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudGrid>
            @foreach (var product in paginatedResult?.Items ?? new List<Product>())
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard>
                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                    {
                        <MudCardMedia Image="@product.ImageUrl" Height="200" />
                    }
                    else
                    {
                        <MudCardMedia Image="@($"https://via.placeholder.com/300x200?text={Uri.EscapeDataString(product.Name)}")" Height="200" />
                    }
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@product.Name</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@product.Category</MudText>
                        <MudText Typo="Typo.body1" Class="mt-2">
                            <strong>$@product.Price.ToString("F2")</strong> / @(product.Unit ?? "unit")
                        </MudText>
                        <MudChip T="string" Color="@(product.IsActive ? Color.Success : Color.Error)" Size="Size.Small">
                            @(product.IsActive ? "Active" : "Inactive")
                        </MudChip>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => ViewProduct(product))">View</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => EditProduct(product))">Edit</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => DeleteProduct(product))">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            }
        </MudGrid>
    }

    @if (!isLoading && paginatedResult != null && !paginatedResult.Items.Any())
    {
        <MudAlert Severity="Severity.Info" Class="mt-4">
            No products available. Click "Add Product" to start adding products to the catalog.
        </MudAlert>
    }

    @if (paginatedResult != null && paginatedResult.TotalPages > 1)
    {
        <MudPaper Class="mt-4 pa-4">
            <MudGrid AlignItems="Center">
                <MudItem xs="12" md="4">
                    <MudText Typo="Typo.body2">
                        Showing @((paginatedResult.PageNumber - 1) * paginatedResult.PageSize + 1) to
                        @Math.Min(paginatedResult.PageNumber * paginatedResult.PageSize, paginatedResult.TotalCount) of
                        @paginatedResult.TotalCount products
                    </MudText>
                </MudItem>
                <MudItem xs="12" md="8" Class="d-flex justify-end">
                    <MudPagination Count="@paginatedResult.TotalPages"
                                   Selected="@currentPage"
                                   SelectedChanged="OnPageChanged"
                                   Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   ShowFirstButton="true"
                                   ShowLastButton="true" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@code {
    private enum ViewMode { Cards, Table }

    private PaginatedResult<Product>? paginatedResult;
    private HashSet<Product> selectedProducts = new();
    private string searchTerm = "";
    private ViewMode viewMode = ViewMode.Cards;
    private int currentPage = 1;
    private const int PageSize = 50;
    private string _selectedCategory = "All Categories";
    private string selectedCategory
    {
        get => _selectedCategory;
        set
        {
            _selectedCategory = value;
            currentPage = 1; // Reset to first page when category changes
            _ = LoadProducts();
        }
    }
    private List<string> categories = new() { "All Categories" };
    private bool isLoading = true;
    private System.Timers.Timer? searchDebounceTimer;

    protected override async Task OnInitializedAsync()
    {
        categories = await ProductService.GetCategoriesAsync();
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;

            // Load paginated products
            paginatedResult = await ProductService.GetProductsAsync(
                page: currentPage,
                pageSize: PageSize,
                searchTerm: searchTerm,
                category: selectedCategory,
                sortBy: "createdat",
                sortDescending: true);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading products: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        // Reset to first page when filters change
        currentPage = 1;
        await LoadProducts();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadProducts();
    }

    private void OnSearchTermChanged(string value)
    {
        searchTerm = value;

        // Debounce search
        searchDebounceTimer?.Stop();
        searchDebounceTimer?.Dispose();

        searchDebounceTimer = new System.Timers.Timer(500);
        searchDebounceTimer.Elapsed += async (sender, e) =>
        {
            searchDebounceTimer?.Dispose();
            await InvokeAsync(async () =>
            {
                await ApplyFilters();
            });
        };
        searchDebounceTimer.AutoReset = false;
        searchDebounceTimer.Start();
    }


    private async Task OpenAddProductDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(AddProductDialog.OnProductAdded), EventCallback.Factory.Create<Product>(this, OnProductAdded) },
            { nameof(AddProductDialog.OnCancel), EventCallback.Factory.Create(this, OnDialogCancel) }
        };
        
        var options = new DialogOptions 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true
        };
        
        var dialog = await DialogService.ShowAsync<AddProductDialog>("Add New Product", parameters, options);
        await dialog.Result;
    }
    
    private async Task OnProductAdded(Product product)
    {
        await LoadProducts();
        Snackbar.Add("Product added successfully", Severity.Success);
    }
    
    private void OnDialogCancel()
    {
        // Dialog cancelled
    }

    private async Task ViewProduct(Product product)
    {
        var parameters = new DialogParameters<ProductDetailsDialog>
        {
            { x => x.Product, product }
        };
        
        var dialog = await DialogService.ShowAsync<ProductDetailsDialog>($"Product Details - {product.Name}", parameters);
    }

    private async Task EditProduct(Product product)
    {
        var parameters = new DialogParameters
        {
            { "Product", product },
            { nameof(EditProductDialog.OnProductUpdated), EventCallback.Factory.Create<Product>(this, OnProductUpdated) },
            { nameof(EditProductDialog.OnCancel), EventCallback.Factory.Create(this, OnDialogCancel) }
        };
        
        var options = new DialogOptions 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true
        };
        
        var dialog = await DialogService.ShowAsync<EditProductDialog>("Edit Product", parameters, options);
        await dialog.Result;
    }

    private async Task OnProductUpdated(Product product)
    {
        await LoadProducts();
        Snackbar.Add("Product updated successfully", Severity.Success);
    }

    private async Task DeleteProduct(Product product)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Product",
            $"Are you sure you want to delete '{product.Name}'?",
            yesText: "Delete", cancelText: "Cancel");
            
        if (result == true)
        {
            try
            {
                await UnitOfWork.Products.DeleteAsync(product);
                await UnitOfWork.SaveChangesAsync();
                await LoadProducts();
                Snackbar.Add("Product deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting product: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task BulkDeleteProducts()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Products",
            $"Are you sure you want to delete {selectedProducts.Count} selected products?",
            yesText: "Delete All", cancelText: "Cancel");
            
        if (result == true)
        {
            try
            {
                foreach (var product in selectedProducts)
                {
                    await UnitOfWork.Products.DeleteAsync(product);
                }
                await UnitOfWork.SaveChangesAsync();
                
                selectedProducts.Clear();
                await LoadProducts();
                Snackbar.Add($"Products deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting products: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private async Task ExportSelected()
    {
        try
        {
            var csv = new System.Text.StringBuilder();
            csv.AppendLine("Name,Category,Price,Unit,SKU,Stock,Origin,IsOrganic,IsActive");
            
            foreach (var product in selectedProducts)
            {
                csv.AppendLine($"\"{product.Name}\",\"{product.Category}\",{product.Price},\"{product.Unit}\",\"{product.SKU ?? ""}\",{product.StockQuantity},\"{product.Origin ?? ""}\",{product.IsOrganic},{product.IsActive}");
            }
            
            // In a real app, you'd download this as a file
            // For now, we'll copy to clipboard
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", csv.ToString());
            Snackbar.Add($"Exported {selectedProducts.Count} products to clipboard (CSV format)", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting products: {ex.Message}", Severity.Error);
        }
    }
    
    public void Dispose()
    {
        searchDebounceTimer?.Stop();
        searchDebounceTimer?.Dispose();
        UnitOfWork?.Dispose();
    }
}