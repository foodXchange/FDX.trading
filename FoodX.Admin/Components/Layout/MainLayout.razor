@using FoodX.Admin.Themes
@using FoodX.Admin.Services
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject IPortalContextService PortalContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IDisposable

<MudThemeProvider Theme="FoodXTheme.Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudStaticNavDrawerToggle DrawerId="nav-drawer" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" aria-label="Toggle navigation menu" />
        <MudLink Href="/" Color="Color.Inherit" Underline="Underline.None" Class="d-flex align-center">
            <MudIcon Icon="@GetPortalIcon()" Class="mr-2" />
            <MudText Typo="Typo.h5" Class="ml-1">@GetPortalTitle()</MudText>
        </MudLink>
        
        <MudSpacer />
        
        <AuthorizeView>
            <Authorized>
                <!-- Portal Switcher for SuperAdmin -->
                <AuthorizeView Roles="SuperAdmin" Context="superAdminContext">
                    <MudMenu Icon="@Icons.Material.Filled.SwapHoriz" Color="Color.Inherit" Label="Switch Portal" 
                             AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Class="mr-4">
                        <MudMenuItem OnClick="@(() => SwitchPortal(PortalMode.Admin))" 
                                     Icon="@Icons.Material.Filled.AdminPanelSettings">
                            <MudText>Admin Portal</MudText>
                            @if (PortalContext.CurrentMode == PortalMode.Admin)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" Class="ml-2" />
                            }
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => SwitchPortal(PortalMode.Supplier))" 
                                     Icon="@Icons.Material.Filled.LocalShipping">
                            <MudText>Supplier Portal</MudText>
                            @if (PortalContext.CurrentMode == PortalMode.Supplier)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" Class="ml-2" />
                            }
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => SwitchPortal(PortalMode.Buyer))" 
                                     Icon="@Icons.Material.Filled.ShoppingCart">
                            <MudText>Buyer Portal</MudText>
                            @if (PortalContext.CurrentMode == PortalMode.Buyer)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" Class="ml-2" />
                            }
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => SwitchPortal(PortalMode.Marketplace))" 
                                     Icon="@Icons.Material.Filled.Store">
                            <MudText>Marketplace</MudText>
                            @if (PortalContext.CurrentMode == PortalMode.Marketplace)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" Class="ml-2" />
                            }
                        </MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick="@OpenImpersonationDialog" 
                                     Icon="@Icons.Material.Filled.PersonSearch">
                            <MudText>Impersonate User</MudText>
                        </MudMenuItem>
                    </MudMenu>
                    
                    <!-- Current Portal Mode Chip -->
                    <MudChip T="string" Color="GetPortalColor()" Size="Size.Small" Class="mr-3">
                        @PortalContext.CurrentMode.ToString() Mode
                    </MudChip>
                </AuthorizeView>
                
                <MudText Class="mr-4">@context.User.Identity?.Name</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Href="/Account/Manage" aria-label="Manage account" />
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Href="/Account/Logout" aria-label="Sign out" />
            </Authorized>
            <NotAuthorized>
                <MudButton Color="Color.Secondary" Variant="Variant.Filled" Href="/Account/MagicLink">Sign In</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    
    <!-- Impersonation Banner -->
    @if (PortalContext.IsImpersonating)
    {
        <MudPaper Class="pa-2" Square="true" Elevation="0" Style="background-color: var(--mud-palette-warning-lighten); border-bottom: 2px solid var(--mud-palette-warning);">
            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center justify-center">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Class="mr-2" />
                    <MudText Typo="Typo.body1">
                        <strong>Impersonation Active:</strong> Viewing as @PortalContext.ImpersonatedUser?.Identity?.Name
                    </MudText>
                    @if (timeRemaining.HasValue)
                    {
                        <MudText Class="ml-3">Time remaining: @FormatTimeRemaining(timeRemaining.Value)</MudText>
                    }
                    <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" 
                               OnClick="EndImpersonation" Class="ml-3">
                        End Impersonation
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
    
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu Class="pa-2">
            <MudText Typo="Typo.h6" Class="px-4 mt-3">@GetPortalTitle()</MudText>
            <MudText Typo="Typo.body2" Class="px-4 text-muted mb-3">@GetPortalSubtitle()</MudText>
            <MudDivider Class="my-2" />
        </MudNavMenu>
        
        <!-- Using simplified unified navigation -->
        <SimplifiedNavMenu />
    </MudDrawer>
    
    <MudMainContent Class="pt-16 pa-4" Style="@(PortalContext.IsImpersonating ? "padding-top: 104px !important;" : "")">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet style="display: none;">
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">ðŸ—™</span>
</div>

@code {
    private bool _drawerOpen = true;
    private TimeSpan? timeRemaining;
    private System.Timers.Timer? _timer;
    private bool _isSuperAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _isSuperAdmin = authState.User.IsInRole("SuperAdmin");
        
        // Subscribe to portal context events
        PortalContext.PortalModeChanged += OnPortalModeChanged;
        PortalContext.ImpersonationChanged += OnImpersonationChanged;
        
        // Start timer for impersonation countdown
        if (PortalContext.IsImpersonating)
        {
            StartImpersonationTimer();
        }
    }
    
    private void StartImpersonationTimer()
    {
        _timer?.Dispose();
        _timer = new System.Timers.Timer(10000); // Update every 10 seconds instead of every second
        _timer.Elapsed += (sender, e) =>
        {
            timeRemaining = PortalContext.GetImpersonationTimeRemaining();
            InvokeAsync(StateHasChanged);
        };
        _timer.Start();
    }
    
    private void StopImpersonationTimer()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;
    }
    
    private void OnPortalModeChanged(object? sender, PortalMode mode)
    {
        InvokeAsync(StateHasChanged);
    }
    
    private void OnImpersonationChanged(object? sender, ImpersonationEventArgs e)
    {
        if (e.IsImpersonating)
        {
            StartImpersonationTimer();
        }
        else
        {
            StopImpersonationTimer();
        }
        InvokeAsync(StateHasChanged);
    }
    
    private void SwitchPortal(PortalMode mode)
    {
        PortalContext.SetPortalMode(mode);
    }
    
    private void OpenImpersonationDialog()
    {
        NavigationManager.NavigateTo("/superadmin/impersonate");
    }
    
    private void EndImpersonation()
    {
        PortalContext.EndImpersonation();
    }
    
    private string GetPortalIcon()
    {
        return PortalContext.CurrentMode switch
        {
            PortalMode.Admin => Icons.Material.Filled.AdminPanelSettings,
            PortalMode.Supplier => Icons.Material.Filled.LocalShipping,
            PortalMode.Buyer => Icons.Material.Filled.ShoppingCart,
            PortalMode.Marketplace => Icons.Material.Filled.Store,
            _ => Icons.Material.Filled.Store
        };
    }
    
    private string GetPortalTitle()
    {
        return PortalContext.CurrentMode switch
        {
            PortalMode.Admin => "FoodX Admin Portal",
            PortalMode.Supplier => "FoodX Supplier Portal",
            PortalMode.Buyer => "FoodX Buyer Portal",
            PortalMode.Marketplace => "FoodX Marketplace",
            _ => "FoodX B2B Platform"
        };
    }
    
    private string GetPortalSubtitle()
    {
        return PortalContext.CurrentMode switch
        {
            PortalMode.Admin => "System Management & Analytics",
            PortalMode.Supplier => "Manage Products & Orders",
            PortalMode.Buyer => "Procurement & Sourcing",
            PortalMode.Marketplace => "B2B Food Exchange",
            _ => "B2B Food Exchange Platform"
        };
    }
    
    private Color GetPortalColor()
    {
        return PortalContext.CurrentMode switch
        {
            PortalMode.Admin => Color.Primary,
            PortalMode.Supplier => Color.Success,
            PortalMode.Buyer => Color.Info,
            PortalMode.Marketplace => Color.Secondary,
            _ => Color.Default
        };
    }
    
    private string FormatTimeRemaining(TimeSpan time)
    {
        if (time.TotalMinutes >= 1)
            return $"{(int)time.TotalMinutes}:{time.Seconds:D2}";
        else
            return $"{time.Seconds} seconds";
    }
    
    public void Dispose()
    {
        PortalContext.PortalModeChanged -= OnPortalModeChanged;
        PortalContext.ImpersonationChanged -= OnImpersonationChanged;
        StopImpersonationTimer();
    }
}