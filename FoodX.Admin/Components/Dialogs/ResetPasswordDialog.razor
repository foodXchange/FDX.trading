@using Microsoft.AspNetCore.Identity
@using FoodX.Admin.Data
@using MudBlazor
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 450px;">
            <MudText Typo="Typo.h6" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.LockReset" Class="mr-2" />
                Reset Password
            </MudText>

            <MudAlert Severity="Severity.Warning" Class="mb-4">
                You are about to reset the password for <strong>@GetUserFullName(User)</strong>.
                The user will need to use the new password to log in.
            </MudAlert>

            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Value="@User.Email"
                                  Label="User Email"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true" />
                </MudItem>

                <MudItem xs="12">
                    <MudRadioGroup @bind-Value="resetMethod">
                        <MudRadio Value="@("generate")" Color="Color.Primary">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.AutoFixHigh" Size="Size.Small" Class="mr-2" />
                                <div>
                                    <MudText Typo="Typo.body2">Generate Secure Password</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        System will generate a strong password automatically
                                    </MudText>
                                </div>
                            </div>
                        </MudRadio>
                        <MudRadio Value="@("custom")" Color="Color.Secondary">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="mr-2" />
                                <div>
                                    <MudText Typo="Typo.body2">Set Custom Password</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        Choose a specific password for this user
                                    </MudText>
                                </div>
                            </div>
                        </MudRadio>
                    </MudRadioGroup>
                </MudItem>

                @if (resetMethod == "custom")
                {
                    <MudItem xs="12">
                        <MudTextField @bind-Value="customPassword"
                                      Label="New Password"
                                      InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@(showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                      OnAdornmentClick="TogglePasswordVisibility" />
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            Password must be at least 6 characters long
                        </MudText>
                    </MudItem>
                }

                <MudItem xs="12">
                    <MudCheckBox @bind-Value="requirePasswordChange"
                                 Label="Require password change on next login"
                                 Color="Color.Info" />
                </MudItem>

                <MudItem xs="12">
                    <MudCheckBox @bind-Value="sendNotification"
                                 Label="Send email notification to user"
                                 Color="Color.Success" />
                </MudItem>

                @if (sendNotification)
                {
                    <MudItem xs="12">
                        <MudTextField @bind-Value="emailMessage"
                                      Label="Custom Message (optional)"
                                      Variant="Variant.Outlined"
                                      Lines="3"
                                      HelperText="Additional message to include in the notification email" />
                    </MudItem>
                }

                @if (!string.IsNullOrEmpty(generatedPassword))
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Success" Class="mt-2">
                            <MudText Typo="Typo.subtitle2">New Password Generated:</MudText>
                            <MudText Typo="Typo.body1" Class="font-monospace">@generatedPassword</MudText>
                            <MudButton Size="Size.Small" Variant="Variant.Text" OnClick="CopyPassword" Class="mt-1">
                                <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" Class="mr-1" />
                                Copy to Clipboard
                            </MudButton>
                        </MudAlert>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Warning"
                   Variant="Variant.Filled"
                   OnClick="ResetPassword"
                   Disabled="@(resetMethod == "custom" && string.IsNullOrEmpty(customPassword) || _processing)">
            @if (_processing)
            {
                <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                <span>Resetting...</span>
            }
            else
            {
                <span>Reset Password</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ApplicationUser User { get; set; } = default!;

    private string resetMethod = "generate";
    private string customPassword = "";
    private bool showPassword = false;
    private bool requirePasswordChange = true;
    private bool sendNotification = true;
    private string emailMessage = "";
    private string generatedPassword = "";
    private bool _processing = false;

    private async Task ResetPassword()
    {
        if (_processing) return;

        if (resetMethod == "custom" && string.IsNullOrEmpty(customPassword))
        {
            Snackbar.Add("Please enter a custom password", Severity.Warning);
            return;
        }

        _processing = true;

        try
        {
            string newPassword;

            if (resetMethod == "generate")
            {
                newPassword = GenerateSecurePassword();
                generatedPassword = newPassword;
            }
            else
            {
                newPassword = customPassword;
            }

            // Generate password reset token
            var token = await UserManager.GeneratePasswordResetTokenAsync(User);

            // Reset the password
            var result = await UserManager.ResetPasswordAsync(User, token, newPassword);

            if (result.Succeeded)
            {
                // TODO: Implement password change requirement flag
                if (requirePasswordChange)
                {
                    // Set a flag that forces password change on next login
                }

                // TODO: Send notification email
                if (sendNotification)
                {
                    // Send email with new password and custom message
                }

                if (resetMethod == "generate")
                {
                    Snackbar.Add("Password reset successfully! Make sure to copy the generated password.", Severity.Success);
                    StateHasChanged(); // Show the generated password
                }
                else
                {
                    Snackbar.Add("Password reset successfully!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
            }
            else
            {
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                Snackbar.Add($"Failed to reset password: {errors}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error resetting password: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private Task CopyPassword()
    {
        // TODO: Implement clipboard copy functionality
        Snackbar.Add("Password copied to clipboard", Severity.Success);
        return Task.CompletedTask;
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void Cancel() => MudDialog.Cancel();

    private string GetUserFullName(ApplicationUser user)
    {
        if (!string.IsNullOrEmpty(user.FirstName) || !string.IsNullOrEmpty(user.LastName))
            return $"{user.FirstName} {user.LastName}".Trim();
        return user.UserName ?? user.Email ?? "Unknown";
    }

    private string GenerateSecurePassword()
    {
        const string lowerCase = "abcdefghijklmnopqrstuvwxyz";
        const string upperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string numbers = "0123456789";
        const string specialChars = "!@#$%&*";

        var random = new Random();
        var password = new List<char>();

        // Ensure at least one character from each category
        password.Add(lowerCase[random.Next(lowerCase.Length)]);
        password.Add(upperCase[random.Next(upperCase.Length)]);
        password.Add(numbers[random.Next(numbers.Length)]);
        password.Add(specialChars[random.Next(specialChars.Length)]);

        // Fill the rest randomly
        var allChars = lowerCase + upperCase + numbers + specialChars;
        for (int i = password.Count; i < 12; i++)
        {
            password.Add(allChars[random.Next(allChars.Length)]);
        }

        // Shuffle the password
        for (int i = password.Count - 1; i > 0; i--)
        {
            int j = random.Next(i + 1);
            (password[i], password[j]) = (password[j], password[i]);
        }

        return new string(password.ToArray());
    }
}