@using FoodX.Admin.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="User.FirstName" Label="First Name" Required="true" 
                              RequiredError="First name is required" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="User.LastName" Label="Last Name" Required="true" 
                              RequiredError="Last name is required" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="User.Email" Label="Email" Required="true" 
                              RequiredError="Email is required" InputType="InputType.Email"
                              Disabled="@(!IsNew)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="User.CompanyName" Label="Company Name" 
                              Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="User.Department" Label="Department" 
                              Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="User.JobTitle" Label="Job Title" 
                              Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="User.Country" Label="Country" 
                              Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudSelect @bind-Value="_selectedRole" Label="Role" Variant="Variant.Outlined">
                    @foreach (var role in _availableRoles)
                    {
                        <MudSelectItem Value="@role">@role</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            @if (IsNew)
            {
                <MudItem xs="12">
                    <MudTextField @bind-Value="_password" Label="Password" InputType="InputType.Password" 
                                  Required="true" RequiredError="Password is required"
                                  Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_confirmPassword" Label="Confirm Password" InputType="InputType.Password" 
                                  Required="true" RequiredError="Please confirm password"
                                  Variant="Variant.Outlined" />
                </MudItem>
            }
            <MudItem xs="12">
                <MudSwitch @bind-Value="User.EmailConfirmed" Label="Email Verified" Color="Color.Primary" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">
            @(IsNew ? "Add User" : "Save Changes")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ApplicationUser User { get; set; } = new();
    [Parameter] public bool IsNew { get; set; }
    
    private string _password = "";
    private string _confirmPassword = "";
    private string _selectedRole = "Buyer";
    private List<string> _availableRoles = new();
    
    protected override async Task OnInitializedAsync()
    {
        // Load available roles
        _availableRoles = await RoleManager.Roles.Select(r => r.Name!).ToListAsync();
        
        if (!IsNew && User != null)
        {
            // Load current user role
            var roles = await UserManager.GetRolesAsync(User);
            _selectedRole = roles.FirstOrDefault() ?? "Buyer";
        }
    }
    
    void Cancel() => MudDialog.Cancel();
    
    async Task Submit()
    {
        try
        {
            if (IsNew)
            {
                // Validate passwords match
                if (_password != _confirmPassword)
                {
                    Snackbar.Add("Passwords do not match", Severity.Error);
                    return;
                }
                
                if (string.IsNullOrWhiteSpace(_password))
                {
                    Snackbar.Add("Password is required", Severity.Error);
                    return;
                }
                
                // Set username same as email
                User.UserName = User.Email;
                User.NormalizedUserName = User.Email?.ToUpperInvariant();
                User.NormalizedEmail = User.Email?.ToUpperInvariant();
                User.CreatedAt = DateTime.UtcNow;
                
                // Create new user
                var result = await UserManager.CreateAsync(User, _password);
                
                if (result.Succeeded)
                {
                    // Add to role
                    await UserManager.AddToRoleAsync(User, _selectedRole);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                    Snackbar.Add($"Error creating user: {errors}", Severity.Error);
                }
            }
            else
            {
                // Update existing user
                User.UpdatedAt = DateTime.UtcNow;
                var result = await UserManager.UpdateAsync(User);
                
                if (result.Succeeded)
                {
                    // Update role if changed
                    var currentRoles = await UserManager.GetRolesAsync(User);
                    if (currentRoles.FirstOrDefault() != _selectedRole)
                    {
                        await UserManager.RemoveFromRolesAsync(User, currentRoles);
                        await UserManager.AddToRoleAsync(User, _selectedRole);
                    }
                    
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                    Snackbar.Add($"Error updating user: {errors}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
    
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
}