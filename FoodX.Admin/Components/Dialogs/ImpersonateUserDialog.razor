@using FoodX.Admin.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@inject FoodXDbContext DbContext
@inject UserManager<ApplicationUser> UserManager

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.PersonSearch" Class="mr-2" />
            Impersonate User
        </MudText>
        
        <MudAlert Severity="Severity.Warning" Class="mb-4">
            <MudText>
                <strong>Warning:</strong> All actions will be logged for security and compliance purposes.
                Impersonation sessions expire after 30 minutes.
            </MudText>
        </MudAlert>
        
        <!-- Search Field -->
        <MudTextField @bind-Value="_searchTerm" 
                      Label="Search Users" 
                      Variant="Variant.Outlined"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Immediate="true"
                      OnKeyUp="@SearchUsers"
                      HelperText="Search by name, email, or company" />
        
        <!-- Filter by Role -->
        <MudSelect T="string" Label="Filter by Role" Value="_selectedRole" 
                   ValueChanged="@((string value) => { _selectedRole = value; FilterUsers(); })"
                   Variant="Variant.Outlined" Class="mt-4">
            <MudSelectItem Value="@("")">All Roles</MudSelectItem>
            <MudSelectItem Value="@("Supplier")">Suppliers</MudSelectItem>
            <MudSelectItem Value="@("Buyer")">Buyers</MudSelectItem>
            <MudSelectItem Value="@("Admin")">Admins</MudSelectItem>
            <MudSelectItem Value="@("Agent")">Agents</MudSelectItem>
        </MudSelect>
        
        <!-- User List -->
        <MudPaper Class="mt-4" Elevation="0" Outlined="true" Style="max-height: 400px; overflow-y: auto;">
            @if (_isLoading)
            {
                <MudProgressLinear Indeterminate="true" />
            }
            else if (!_filteredUsers.Any())
            {
                <MudText Typo="Typo.body2" Class="pa-4 text-center">
                    No users found matching your criteria.
                </MudText>
            }
            else
            {
                <MudList T="ApplicationUser" Dense="true">
                    @foreach (var user in _filteredUsers)
                    {
                        <MudListItem T="ApplicationUser"
                                     OnClick="@(() => SelectUser(user))"
                                     Class="@(user == _selectedUser ? "mud-selected-item" : "")">
                            <MudGrid>
                                <MudItem xs="1">
                                    <MudAvatar Size="Size.Small">
                                        @GetUserInitials(user)
                                    </MudAvatar>
                                </MudItem>
                                <MudItem xs="7">
                                    <MudText Typo="Typo.body2">
                                        <strong>@user.FirstName @user.LastName</strong>
                                    </MudText>
                                    <MudText Typo="Typo.caption">@user.Email</MudText>
                                    @if (!string.IsNullOrWhiteSpace(user.CompanyName))
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                            @user.CompanyName
                                        </MudText>
                                    }
                                </MudItem>
                                <MudItem xs="4" Class="text-right">
                                    @foreach (var role in _userRoles.GetValueOrDefault(user.Id, new List<string>()))
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="GetRoleColor(role)">
                                            @role
                                        </MudChip>
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
            }
        </MudPaper>
        
        <!-- Selected User Details -->
        @if (_selectedUser != null)
        {
            <MudPaper Class="mt-4 pa-3" Elevation="0" Style="background-color: var(--mud-palette-background-grey);">
                <MudText Typo="Typo.subtitle2">Selected User:</MudText>
                <MudGrid Class="mt-2">
                    <MudItem xs="6">
                        <MudText Typo="Typo.caption" Color="Color.Tertiary">Name:</MudText>
                        <MudText Typo="Typo.body2">@_selectedUser.FirstName @_selectedUser.LastName</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.caption" Color="Color.Tertiary">Email:</MudText>
                        <MudText Typo="Typo.body2">@_selectedUser.Email</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.caption" Color="Color.Tertiary">Company:</MudText>
                        <MudText Typo="Typo.body2">@(_selectedUser.CompanyName ?? "N/A")</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.caption" Color="Color.Tertiary">Last Login:</MudText>
                        <MudText Typo="Typo.body2">
                            @(_selectedUser.LastLoginAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" 
                   OnClick="StartImpersonation"
                   Disabled="@(_selectedUser == null || _isImpersonating)">
            @if (_isImpersonating)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            Start Impersonation
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] 
    public EventCallback<string> OnImpersonationStarted { get; set; }
    
    private string _searchTerm = "";
    private string _selectedRole = "";
    private ApplicationUser? _selectedUser;
    private List<ApplicationUser> _allUsers = new();
    private List<ApplicationUser> _filteredUsers = new();
    private Dictionary<string, List<string>> _userRoles = new();
    private bool _isLoading = true;
    private bool _isImpersonating = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }
    
    private async Task LoadUsers()
    {
        _isLoading = true;
        
        try
        {
            // Load all users except SuperAdmin
            _allUsers = await DbContext.Users
                .OrderBy(u => u.FirstName)
                .ThenBy(u => u.LastName)
                .ToListAsync();
            
            // Load roles for each user
            foreach (var user in _allUsers)
            {
                var roles = await UserManager.GetRolesAsync(user);
                _userRoles[user.Id] = roles.ToList();
            }
            
            // Remove SuperAdmin users from the list
            _allUsers = _allUsers.Where(u => !_userRoles[u.Id].Contains("SuperAdmin")).ToList();
            
            _filteredUsers = _allUsers;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private void SearchUsers(KeyboardEventArgs e)
    {
        FilterUsers();
    }
    
    private void FilterUsers()
    {
        var filtered = _allUsers.AsEnumerable();
        
        // Apply search filter
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            var searchLower = _searchTerm.ToLower();
            filtered = filtered.Where(u => 
                (u.FirstName?.ToLower().Contains(searchLower) ?? false) ||
                (u.LastName?.ToLower().Contains(searchLower) ?? false) ||
                (u.Email?.ToLower().Contains(searchLower) ?? false) ||
                (u.CompanyName?.ToLower().Contains(searchLower) ?? false));
        }
        
        // Apply role filter
        if (!string.IsNullOrWhiteSpace(_selectedRole))
        {
            filtered = filtered.Where(u => _userRoles[u.Id].Contains(_selectedRole));
        }
        
        _filteredUsers = filtered.ToList();
        StateHasChanged();
    }
    
    private void SelectUser(ApplicationUser user)
    {
        _selectedUser = user;
    }
    
    private string GetUserInitials(ApplicationUser user)
    {
        var initials = "";
        if (!string.IsNullOrWhiteSpace(user.FirstName))
            initials += user.FirstName[0];
        if (!string.IsNullOrWhiteSpace(user.LastName))
            initials += user.LastName[0];
        
        return string.IsNullOrWhiteSpace(initials) ? user.Email?[0].ToString().ToUpper() ?? "?" : initials.ToUpper();
    }
    
    private Color GetRoleColor(string role)
    {
        return role switch
        {
            "SuperAdmin" => Color.Error,
            "Admin" => Color.Primary,
            "Supplier" => Color.Success,
            "Buyer" => Color.Info,
            "Agent" => Color.Warning,
            _ => Color.Default
        };
    }
    
    private async Task StartImpersonation()
    {
        if (_selectedUser == null) return;
        
        _isImpersonating = true;
        
        await OnImpersonationStarted.InvokeAsync(_selectedUser.Id);
        
        MudDialog.Close(DialogResult.Ok(_selectedUser));
    }
    
    private void Cancel() => MudDialog.Cancel();
}