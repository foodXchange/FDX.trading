@page "/Account/Manage"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using FoodX.Admin.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">Profile</MudText>

<StatusMessage />

<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem md="6">
            <MudTextField Value="@user?.Email" Label="Email Address" Disabled="true" 
                         HelperText="Your login email" ReadOnly="true" Variant="Variant.Outlined" />
        </MudItem>
        
        <MudItem md="6">
            <MudTextField Value="@GetUserRole()" Label="Role" Disabled="true" 
                         HelperText="Your account role" ReadOnly="true" Variant="Variant.Outlined" />
        </MudItem>
        
        <MudItem md="12">
            <MudTextField Value="@username" Label="Username" Disabled="true" 
                         Placeholder="Please choose your username." Variant="Variant.Outlined" />
        </MudItem>
        
        <MudItem md="12">
            <MudSelect T="string" Value="Input.Country" Label="Country" Required="true"
                      ValueChanged="@((string value) => OnCountryValueChanged(value))" 
                      HelperText="Select your country" 
                      Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                      TransformOrigin="Origin.TopCenter" PopoverClass="mud-select-popover"
                      Dense="false" Clearable="true" Strict="false">
                <MudSelectItem T="string" Value="@string.Empty">-- Select Country --</MudSelectItem>
                @foreach (var country in Countries)
                {
                    <MudSelectItem T="string" Value="@country.Code">@country.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        
        <MudItem md="3">
            <MudTextField Value="@countryCode" Label="Country Code" Disabled="true" 
                         HelperText="Automatic" ReadOnly="true" Variant="Variant.Outlined" />
        </MudItem>
        
        <MudItem md="9">
            <MudTextField @bind-Value="Input.PhoneNumber"
                         Label="Phone Number" HelperText="Enter number without country code"
                         Placeholder="e.g., 501234567" Variant="Variant.Outlined" />
        </MudItem>
        
        <MudItem md="12">
            <MudTextField Value="@GetFullPhoneNumber()" Label="Full Phone Number (Preview)" 
                         Disabled="true" HelperText="This is how your number will be stored" 
                         Variant="Variant.Outlined" />
        </MudItem>
        
        <MudItem md="12">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Save</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string countryCode = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    // Country list with codes
    private readonly List<CountryInfo> Countries = new()
    {
        new CountryInfo { Code = "US", Name = "United States", PhoneCode = "+1" },
        new CountryInfo { Code = "GB", Name = "United Kingdom", PhoneCode = "+44" },
        new CountryInfo { Code = "IL", Name = "Israel", PhoneCode = "+972" },
        new CountryInfo { Code = "FR", Name = "France", PhoneCode = "+33" },
        new CountryInfo { Code = "DE", Name = "Germany", PhoneCode = "+49" },
        new CountryInfo { Code = "IT", Name = "Italy", PhoneCode = "+39" },
        new CountryInfo { Code = "ES", Name = "Spain", PhoneCode = "+34" },
        new CountryInfo { Code = "NL", Name = "Netherlands", PhoneCode = "+31" },
        new CountryInfo { Code = "BE", Name = "Belgium", PhoneCode = "+32" },
        new CountryInfo { Code = "CH", Name = "Switzerland", PhoneCode = "+41" },
        new CountryInfo { Code = "AT", Name = "Austria", PhoneCode = "+43" },
        new CountryInfo { Code = "PL", Name = "Poland", PhoneCode = "+48" },
        new CountryInfo { Code = "RU", Name = "Russia", PhoneCode = "+7" },
        new CountryInfo { Code = "CN", Name = "China", PhoneCode = "+86" },
        new CountryInfo { Code = "JP", Name = "Japan", PhoneCode = "+81" },
        new CountryInfo { Code = "IN", Name = "India", PhoneCode = "+91" },
        new CountryInfo { Code = "AU", Name = "Australia", PhoneCode = "+61" },
        new CountryInfo { Code = "NZ", Name = "New Zealand", PhoneCode = "+64" },
        new CountryInfo { Code = "CA", Name = "Canada", PhoneCode = "+1" },
        new CountryInfo { Code = "MX", Name = "Mexico", PhoneCode = "+52" },
        new CountryInfo { Code = "BR", Name = "Brazil", PhoneCode = "+55" },
        new CountryInfo { Code = "AR", Name = "Argentina", PhoneCode = "+54" },
        new CountryInfo { Code = "ZA", Name = "South Africa", PhoneCode = "+27" },
        new CountryInfo { Code = "EG", Name = "Egypt", PhoneCode = "+20" },
        new CountryInfo { Code = "SA", Name = "Saudi Arabia", PhoneCode = "+966" },
        new CountryInfo { Code = "AE", Name = "United Arab Emirates", PhoneCode = "+971" },
        new CountryInfo { Code = "TR", Name = "Turkey", PhoneCode = "+90" },
        new CountryInfo { Code = "GR", Name = "Greece", PhoneCode = "+30" },
        new CountryInfo { Code = "PT", Name = "Portugal", PhoneCode = "+351" },
        new CountryInfo { Code = "SE", Name = "Sweden", PhoneCode = "+46" },
        new CountryInfo { Code = "NO", Name = "Norway", PhoneCode = "+47" },
        new CountryInfo { Code = "DK", Name = "Denmark", PhoneCode = "+45" },
        new CountryInfo { Code = "FI", Name = "Finland", PhoneCode = "+358" },
        new CountryInfo { Code = "IE", Name = "Ireland", PhoneCode = "+353" },
        new CountryInfo { Code = "SG", Name = "Singapore", PhoneCode = "+65" },
        new CountryInfo { Code = "MY", Name = "Malaysia", PhoneCode = "+60" },
        new CountryInfo { Code = "TH", Name = "Thailand", PhoneCode = "+66" },
        new CountryInfo { Code = "ID", Name = "Indonesia", PhoneCode = "+62" },
        new CountryInfo { Code = "PH", Name = "Philippines", PhoneCode = "+63" },
        new CountryInfo { Code = "KR", Name = "South Korea", PhoneCode = "+82" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (HttpContext == null)
            {
                // Component is not properly initialized yet
                return;
            }

            user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        if (user == null)
        {
            return;
        }
        
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        
        // Load user's country if stored
        Input.Country = user.Country ?? "";
        
        // Parse phone number if it exists
        if (!string.IsNullOrEmpty(phoneNumber))
        {
            // Extract country code and number
            var country = Countries.FirstOrDefault(c => phoneNumber.StartsWith(c.PhoneCode));
            if (country != null)
            {
                Input.Country = country.Code;
                countryCode = country.PhoneCode;
                Input.PhoneNumber = phoneNumber.Substring(country.PhoneCode.Length).TrimStart();
            }
            else
            {
                Input.PhoneNumber = phoneNumber;
            }
        }
        
        UpdateCountryCode();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing profile page: {ex.Message}");
        }
    }
    
    private void OnCountryValueChanged(string value)
    {
        Input.Country = value;
        UpdateCountryCode();
        StateHasChanged();
    }
    
    private void UpdateCountryCode()
    {
        var country = Countries.FirstOrDefault(c => c.Code == Input.Country);
        countryCode = country?.PhoneCode ?? "";
    }
    
    private string GetFullPhoneNumber()
    {
        if (string.IsNullOrEmpty(countryCode) || string.IsNullOrEmpty(Input.PhoneNumber))
            return "";
            
        // Remove any leading zeros from the phone number
        var cleanNumber = Input.PhoneNumber?.TrimStart('0') ?? "";
        return $"{countryCode}{cleanNumber}";
    }
    
    private string GetUserRole()
    {
        if (user == null) return "User";
        
        if (user.IsSuperAdmin)
            return "Super Admin";
        
        // Check for other roles based on your business logic
        // For now, return a default role
        return "Standard User";
    }

    private async Task OnValidSubmitAsync()
    {
        // Save country to user profile
        user.Country = Input.Country;
        
        // Combine country code with phone number
        var fullPhoneNumber = GetFullPhoneNumber();
        
        if (fullPhoneNumber != phoneNumber && !string.IsNullOrEmpty(fullPhoneNumber))
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, fullPhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                return;
            }
        }
        
        // Update user country
        var updateResult = await UserManager.UpdateAsync(user);
        if (!updateResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update profile.", HttpContext);
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Country")]
        public string Country { get; set; } = "";
        
        [RegularExpression(@"^[0-9]{6,15}$", ErrorMessage = "Please enter a valid phone number (digits only, 6-15 digits)")]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
    
    private class CountryInfo
    {
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
        public string PhoneCode { get; set; } = "";
    }
}