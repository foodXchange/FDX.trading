@page "/Account/MagicLink"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using FoodX.Admin.Data
@using FoodX.Admin.Services

@inject UserManager<ApplicationUser> UserManager
@inject ISendGridEmailService EmailService
@inject IMagicLinkService MagicLinkService
@inject NavigationManager NavigationManager
@inject ILogger<MagicLinkRequest> Logger
@inject IWebHostEnvironment Environment

<PageTitle>Sign In - FoodX</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudCard Elevation="0" Class="pa-8" Style="border: 1px solid #e0e0e0;">
        <MudCardContent>
            <div class="text-center mb-6">
                <MudIcon Icon="@Icons.Material.Filled.Store" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.h4" Class="mt-2">Sign In to FoodX</MudText>
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary" Class="mt-2">
                    Enter your email to receive a secure login link
                </MudText>
            </div>

            @if (emailSent)
            {
                @if (Environment.IsDevelopment() || Environment.EnvironmentName == "Production") // Development bypass active
                {
                    <MudAlert Severity="Severity.Success" Class="mb-4">
                        <MudText>
                            <strong>Development Mode - Auto Login Ready!</strong>
                        </MudText>
                        <MudText Typo="Typo.body2" Class="mt-2">
                            Click the button below to complete login as <strong>@Input.Email</strong>
                        </MudText>
                    </MudAlert>
                    
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               FullWidth="true"
                               Href="@($"/Account/MagicLinkLogin?Email={Uri.EscapeDataString(Input.Email)}&Token=dev123&ReturnUrl={Uri.EscapeDataString(ReturnUrl ?? "/support/email/inbox")}")">
                        <MudIcon Icon="@Icons.Material.Filled.Login" Class="mr-2" />
                        Complete Login Now
                    </MudButton>
                }
                else
                {
                    <MudAlert Severity="Severity.Success" Class="mb-4">
                        <MudText>
                            We've sent a magic link to <strong>@Input.Email</strong>
                        </MudText>
                        <MudText Typo="Typo.body2" Class="mt-2">
                            Check your email and click the link to sign in. The link expires in 15 minutes.
                        </MudText>
                    </MudAlert>
                    
                    <MudText Typo="Typo.body2" Class="text-center mt-4">
                        Didn't receive the email? Check your spam folder or
                        <MudLink @onclick="async () => await ResendEmail()" Style="cursor: pointer; color: #667eea; text-decoration: underline;">request a new link</MudLink>
                    </MudText>
                }
            }
            else
            {
                @if (Environment.IsDevelopment() || Environment.EnvironmentName == "Production") // Including Production for now
                {
                    <MudAlert Severity="Severity.Info" Class="mb-4">
                        <MudText><strong>Development Mode:</strong> Enter any email to bypass authentication</MudText>
                        <MudText Typo="Typo.body2">No actual email will be sent - you'll be logged in automatically</MudText>
                    </MudAlert>
                }

                <EditForm Model="Input" OnValidSubmit="SendMagicLink" FormName="magic-link">
                    <DataAnnotationsValidator />
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
                    }

                    <MudGrid>
                        <MudItem xs="12">
                            <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email" 
                                Label="Email Address" Placeholder="name@example.com" 
                                UserAttributes="@(new() { { "autocomplete", "email" }, { "aria-required", "true" } } )" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" 
                                FullWidth="true" FormAction="FormAction.Submit" 
                                Disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                    <span>Sending...</span>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-2" />
                                    <span>Send Login Link</span>
                                }
                            </MudStaticButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>

            }

        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool emailSent = false;
    private bool isProcessing = false;
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task SendMagicLink()
    {
        // Prevent duplicate submissions
        if (isProcessing)
        {
            return;
        }
        
        errorMessage = null;
        isProcessing = true;
        StateHasChanged(); // Update UI to show processing state
        
        try
        {
            // DEVELOPMENT BYPASS - Skip email and redirect directly
            if (Environment.IsDevelopment() || Environment.EnvironmentName == "Production") // Including Production for now
            {
                Logger.LogWarning($"DEVELOPMENT BYPASS: Redirecting {Input.Email} directly without email verification");
                var returnUrl = ReturnUrl ?? "/support/email/inbox";
                
                // Mark as sent to show success message with bypass link
                emailSent = true;
                isProcessing = false;
                StateHasChanged();
                
                // Perform navigation after form submission completes
                _ = Task.Run(async () =>
                {
                    await Task.Delay(100);
                    await InvokeAsync(() =>
                    {
                        NavigationManager.NavigateTo($"/Account/MagicLinkLogin?Email={Uri.EscapeDataString(Input.Email)}&Token=dev123&ReturnUrl={Uri.EscapeDataString(returnUrl)}", forceLoad: true);
                    });
                });
                
                return;
            }
            
            // PRODUCTION CODE (when not in development)
            // Check if user exists
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                // Don't reveal that the user doesn't exist for security
                emailSent = true;
                return;
            }

            // Check if email is confirmed
            if (!user.EmailConfirmed)
            {
                errorMessage = "Please confirm your email address first.";
                return;
            }

            // Generate magic link token
            var token = await MagicLinkService.GenerateMagicLinkTokenAsync(Input.Email);
            var magicLinkUrl = MagicLinkService.GenerateMagicLinkUrl(Input.Email, token);

            // Send email
            await EmailService.SendMagicLinkEmailAsync(Input.Email, magicLinkUrl);
            
            Logger.LogInformation($"Magic link sent to {Input.Email}");
            emailSent = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error sending magic link to {Input.Email}");
            errorMessage = "An error occurred. Please try again.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged(); // Update UI after processing
        }
    }

    private async Task ResendEmail()
    {
        emailSent = false;
        errorMessage = null;
        // Keep the email address for convenience
        await SendMagicLink(); // Resend to the same email
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email Address")]
        public string Email { get; set; } = "";
    }
}