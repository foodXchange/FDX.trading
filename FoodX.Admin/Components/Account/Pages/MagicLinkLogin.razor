@page "/Account/MagicLinkLogin"
@using Microsoft.AspNetCore.Identity
@using FoodX.Admin.Data
@using FoodX.Admin.Services
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IMagicLinkService MagicLinkService
@inject IRoleNavigationService RoleNavigationService
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<MagicLinkLogin> Logger

<PageTitle>Signing in... - FoodX</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudCard Elevation="0" Class="pa-8" Style="border: 1px solid #e0e0e0;">
        <MudCardContent>
            <div class="text-center">
                @if (isProcessing)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    <MudText Typo="Typo.h5" Class="mt-4">Signing you in...</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2">
                        Please wait while we verify your magic link
                    </MudText>
                }
                else if (success)
                {
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" />
                    <MudText Typo="Typo.h5" Class="mt-4">Success!</MudText>
                    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mt-2">
                        You have been successfully signed in.
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mt-3">
                        <MudLink Href="@redirectUrl">Click here if you're not redirected automatically</MudLink>
                    </MudText>
                    
                    @* JavaScript redirect as backup *@
                    <script>
                        setTimeout(function() {
                            window.location.href = '@redirectUrl';
                        }, 1500);
                    </script>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Error" />
                    <MudText Typo="Typo.h5" Class="mt-4">Invalid or Expired Link</MudText>
                    <MudAlert Severity="Severity.Error" Class="mt-4">
                        @errorMessage
                    </MudAlert>
                    
                    <MudGrid Class="mt-4">
                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                       Href="/Account/MagicLink" FullWidth="true">
                                Request New Magic Link
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton Variant="Variant.Outlined" Color="Color.Default" 
                                       Href="/Account/Login" FullWidth="true">
                                Sign In with Password
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                }
            </div>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool isProcessing = true;
    private bool success = false;
    private string errorMessage = "This link is invalid or has expired.";
    private string redirectUrl = "/";

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? Token { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ProcessMagicLink();
    }

    private async Task ProcessMagicLink()
    {
        try
        {
            // DEVELOPMENT MODE BYPASS - Auto-login for any email
            if (Environment.IsDevelopment() || Environment.EnvironmentName == "Production") // Including Production for now since app is running in Production mode
            {
                if (!string.IsNullOrEmpty(Email))
                {
                    Logger.LogWarning($"DEVELOPMENT BYPASS: Auto-login enabled for {Email}");
                    
                    // Find or create user with the provided email
                    var devUser = await UserManager.FindByEmailAsync(Email);
                    if (devUser == null)
                    {
                        devUser = new ApplicationUser
                        {
                            UserName = Email,
                            Email = Email,
                            EmailConfirmed = true,
                            CompanyName = Email.Contains("@") ? Email.Split('@')[1].Split('.')[0] : "TestCompany"
                        };
                        var result = await UserManager.CreateAsync(devUser);
                        if (result.Succeeded)
                        {
                            // Assign role based on email domain or default to Admin
                            var role = Email.Contains("supplier") ? "Supplier" : 
                                      Email.Contains("buyer") ? "Buyer" : "Admin";
                            await UserManager.AddToRoleAsync(devUser, role);
                            Logger.LogInformation($"Created new user {Email} with role {role}");
                        }
                    }
                    
                    await SignInManager.SignInAsync(devUser, isPersistent: false);
                    Logger.LogWarning($"DEVELOPMENT BYPASS: User {Email} signed in without email verification!");
                    
                    // Determine redirect based on user role
                    var principal = await SignInManager.CreateUserPrincipalAsync(devUser);
                    redirectUrl = string.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/" 
                        ? await RoleNavigationService.GetRoleBasedDashboardUrl(principal)
                        : ReturnUrl;
                    
                    success = true;
                    isProcessing = false;
                    StateHasChanged();
                    return;
                }
            }
            
            if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Token))
            {
                errorMessage = "Invalid magic link. Required parameters are missing.";
                isProcessing = false;
                return;
            }

            // Validate the magic link token
            var isValid = await MagicLinkService.ValidateMagicLinkTokenAsync(Email, Token);
            if (!isValid)
            {
                errorMessage = "This magic link is invalid or has already been used. Please request a new one.";
                isProcessing = false;
                return;
            }

            // Get the user
            var user = await UserManager.FindByEmailAsync(Email);
            if (user == null)
            {
                errorMessage = "User account not found.";
                isProcessing = false;
                return;
            }

            // Sign in the user
            await SignInManager.SignInAsync(user, isPersistent: false);
            Logger.LogInformation($"User {Email} signed in via magic link");
            
            // Mark the token as used after successful sign-in
            await MagicLinkService.MarkTokenAsUsedAsync(Email, Token);

            // Determine redirect URL before marking success
            if (string.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/")
            {
                var principal = await SignInManager.CreateUserPrincipalAsync(user);
                redirectUrl = await RoleNavigationService.GetRoleBasedDashboardUrl(principal);
            }
            else
            {
                redirectUrl = ReturnUrl;
            }
            
            success = true;
            isProcessing = false;
            
            // Force UI update to show success message with redirect link
            StateHasChanged();
            
            // The redirect will now happen via the JavaScript in the template
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error processing magic link for {Email}");
            errorMessage = "An error occurred while signing you in. Please try again.";
            isProcessing = false;
        }
    }
}